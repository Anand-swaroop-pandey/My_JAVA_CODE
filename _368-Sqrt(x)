//Bruteforce Approach
import java.util.*;
public class Test
{
   public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      System.out.println("Enter a Non Negative Integer:");
      int n=sc.nextInt();
      System.out.printf("SquareRoot of %d(only integer Part) is %d",n,mySqrt(n));
    }
	
    public static int mySqrt(int x) 
    {
      return (int)Math.sqrt(x);
    }
}

//Optimal Approach
import java.util.*;
public class Test
{
   public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      System.out.println("Enter a Non Negative Integer:");
      int n=sc.nextInt();
      System.out.printf("SquareRoot of %d(only integer Part) is %d",n,mySqrt(n));
    }
	
    public static int mySqrt(int x) 
    {
       return BinarySearch(x);  
    }
    
    public static int BinarySearch(int x)
    {
      long low = 0,high = x;
      int ans =0;
    
      while(low<=high)
      {
        long mid=low+(high-low)/2;
        if(x==(mid*mid))
          return (int)mid;
        else if(x>(mid*mid))
        {
            ans=(int)mid; //we are maintaining this for Non Perfect Square Numbers
            low=mid+1;
        }
        else//if(x<(mid*mid))
          high= mid-1;
      }
      return ans;
    }
}

//Further Optimised

import java.util.*;
public class Test
{
   public static void main(String[] args) {
      Scanner sc=new Scanner(System.in);
      System.out.println("Enter a Non Negative Integer:");
      int n=sc.nextInt();
      System.out.printf("SquareRoot of %d(only integer Part) is %d",n,mySqrt(n));
    }
	
    public static int mySqrt(int x) 
    {
       if(x == 0 || x==1)
        return x;
       return BinarySearch(x);  
    }
    
    public static int BinarySearch(int x)
    {
      int low = 0,high = x,ans =0;
    
      while(low<=high)
      {
        int mid=low+(high-low)/2;
        if((x/mid)==mid)
          return mid;
        else if((x/mid)>mid)
        {
            ans=mid; //we are maintaining this for Non Perfect Square Numbers
            low=mid+1;
        }
        else//if((x/mid)<mid)
          high= mid-1;
      }
      
      return ans;
    }
}
