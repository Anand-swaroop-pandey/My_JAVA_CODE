//Bruteforce Approach

import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       
       System.out.println("Enter the Size of the Array3");
       int o=sc.nextInt();
       if(m>0 && n>0 && o>0)
         {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
            int[] arr3=new int[o];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array3:\n",o);
           for(int i=0;i<o;i++)
              arr3[i]=sc.nextInt();
            System.out.print("Intersection of both the Arrays is: ["+intersectionOfThreeSortedArray(arr1,arr2,arr3)+"]");  
             
         }
         else
           	System.out.println("Invalid Choice");
	}
	
	
	public static String intersectionOfThreeSortedArray(int[] arr1,int[] arr2,int[] arr3)
    {
        int m=removeDuplicatesFromSortedArray(arr1);
        int n=removeDuplicatesFromSortedArray(arr2);
        int o=removeDuplicatesFromSortedArray(arr3);
        int[] common=new int[arr1.length+arr2.length];
        int len=intersectionOfTwoSortedArray1(arr1,m,arr2,n,common);
        return intersectionOfTwoSortedArray2(common,len,arr3,o);
    }
	
	public static int  removeDuplicatesFromSortedArray(int[] arr)
	{
     int n=arr.length;
	   int j=0;
	   for(int i=0;i<n;i++)
	   {
	       while(i<(n-1) && arr[i]==arr[i+1])
	         i++;
	       arr[j++]=arr[i];
	   }
	   return j;
	}
	
	public static int intersectionOfTwoSortedArray1(int[] arr1,int m,int[] arr2,int n,int[] arr)
	{
	    int i=0;
	    int j=0;
	    int k=0;
        while(i<m && j<n)
          if(arr1[i]<arr2[j])
            i++;
          else if(arr2[j]<arr1[i])
            j++;
          else if(arr1[i]==arr2[j])
          {
              arr[k++]=arr1[i];
              i++;
              j++;
          }
          return k;
	}
	
	
	public static String intersectionOfTwoSortedArray2(int[] arr1,int m,int[] arr2,int n)
	{
	    int i=0;
	    int j=0;
	    int k=0;
	    String temp="";
        while(i<m && j<n)
          if(arr1[i]<arr2[j])
            i++;
          else if(arr2[j]<arr1[i])
            j++;
          else if(arr1[i]==arr2[j])
          {
              temp=temp+arr1[i]+",";
              i++;
              j++;
          }
          
          String intersection="";
          for(int index=0;index<(temp.length()-1);index++)
             intersection=intersection+temp.charAt(index);
          return intersection;
	}
}


//Optimal Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) 
	{
	   Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       
       System.out.println("Enter the Size of the Array3");
       int o=sc.nextInt();
       if(m>0 && n>0 && o>0)
         {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
            int[] arr3=new int[o];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array3:\n",o);
           for(int i=0;i<o;i++)
              arr3[i]=sc.nextInt();
           
            System.out.print("Intersection of both the Arrays is: ["+intersectionOfThreeSortedArrayContainingDuplicates(arr1,arr2,arr3)+"]");  
             
         }
         else
           	System.out.println("Invalid Choice");          
	}
	
	
	public static String intersectionOfThreeSortedArrayContainingDuplicates(int[] arr1,int[] arr2,int[] arr3)
    {
        int i=0,j=0,k=0;
	    int prev1=Integer.MIN_VALUE,prev2=Integer.MIN_VALUE,prev3=Integer.MIN_VALUE;
	    int m=arr1.length;
	    int n=arr2.length;
        int o=arr3.length;
	    String temp="";
        while(i<m && j<n && k<o)
        {
          
             while(i<m && prev1==arr1[i])
                i++;
          
             while(j<n && prev2==arr2[j])
                j++;
            
             while(k<o && prev3==arr3[k])
                k++;
          
             if(i<m && j<n && k<o)
             {
              if(arr1[i]==arr2[j] && arr2[j]==arr3[k])
              {
                  temp=temp+arr1[i]+",";
                  prev1=arr1[i];
                  prev2=arr2[j];
                  prev3=arr3[k];
                  i++;
                  j++;
                  k++;
              }
              else
              {
                  int min=minimum(arr1[i],arr2[j],arr3[k]);
                  if(min==arr1[i])
                  {
                    prev1=arr1[i];
                    i++;
                  }
                  else if(min==arr2[j])
                  {
                  prev2=arr2[j];
                  j++;
                  }
                  else if(min==arr3[k])
                  {
                   prev3=arr3[k];
                   k++; 
                  }
              }
             }
        }
          String intersection="";
          for(int index=0;index<(temp.length()-1);index++)
             intersection=intersection+temp.charAt(index);
          return intersection;
    }
    
    public static int minimum(int a,int b,int c)
    {
        int temp=Math.min(a,b);
        int min=Math.min(temp,c);
        return min;
    }
}
