//Bruteforce Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter The Size of The Array:");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements Of The Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Enter Target Value to be Removed:");
	      int target=sc.nextInt();
	      
	      int idx=removeElement(arr,target);
	      System.out.println("Resultant Array is:");
	      for(int i=0;i<idx;i++)
	        System.out.println(arr[i]+" ");
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	 public static int removeElement(int[]arr, int target) 
	 {
        int n=arr.length;
        Arrays.sort(arr);
        
        int first=firstIndex(arr,target);
        if(first==-1)
         return n;
        int last=lastIndex(arr,target);
        
        int j=0;
        for(int i=0;i<first;i++)
          arr[j++]=arr[i];
        for(int i=last+1;i<n;i++)
          arr[j++]=arr[i];
          
        return j;
     }

   public static int firstIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int first=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             first=mid;
             high=mid-1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return first;
   }
   
   
   public static int lastIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int last=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             last=mid;
             low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return last;
   }
}

//Better Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter The Size of The Array:");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements Of The Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Enter Target Value to be Removed:");
	      int target=sc.nextInt();
	      
	      int idx=removeElement(arr,target);
	      System.out.println("Resultant Array is:");
	      for(int i=0;i<idx;i++)
	        System.out.println(arr[i]+" ");
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	  
   public static int removeElement(int[]arr, int target) 
	 {
        HashMap<Integer,Integer>hm=new HashMap<>();
        int n=arr.length;
        for(int i=0;i<n;i++)
        if(arr[i]!=target)
        {
          if(hm.containsKey(arr[i]))
             hm.put(arr[i],hm.get(arr[i])+1);
          else
             hm.put(arr[i],1); 
        }

        int j=0;
        for(int key:hm.keySet())
        {
            int freq=hm.get(key);
            while(freq!=0)
            {
                arr[j++]=key;
                freq--;
            }
        }
        return j;
     }  
}


//Optimal Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter The Size of The Array:");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements Of The Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Enter Target Value to be Removed:");
	      int target=sc.nextInt();
	      
	      int idx=removeElement(arr,target);
	      System.out.println("Resultant Array is:");
	      for(int i=0;i<idx;i++)
	        System.out.println(arr[i]+" ");
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	    public static int removeElement(int[]arr, int target) 
	    {
        return segregateTarget(arr,target);
      }

      public static int segregateTarget(int[]arr, int target)
      {
         int n=arr.length,i=0,j=0;
         while(i<n)
          if(arr[i]!=target)
          {
              //Swapping
             int temp=arr[i];
             arr[i]=arr[j];
             arr[j]=temp;
             i++;
             j++;
          }
          else
            i++;

        return j;
      }
}
