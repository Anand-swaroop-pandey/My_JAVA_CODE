//Bruteforce Approach
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array");
       int n=sc.nextInt();
       if(n>0)
         {
            int[] arr=new int[n];
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextInt();
           
           if(n>1)
             segregatePosAndNeg(arr);
           System.out.println("Segregated Array :");
           for(int i=0;i<n;i++)
              System.out.println(arr[i]);
         }
         else
            System.out.println("Invalid Choice");
   }
   
   public static void segregatePosAndNeg(int[]arr)
   {
       int n=arr.length;
       int k=0;
       int temp[]=new int[n];
             
       for(int i=0;i<n;i++)
          if(arr[i]<0)
             temp[k++]=arr[i];
       
       for(int i=0;i<n;i++)
          if(arr[i]>0)
             temp[k++]=arr[i];
             
       for(int i=0;i<n;i++)
         arr[i]=temp[i];
   }
}

//Better Approach
import java.util.Scanner;
public class Main
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array");
       int n=sc.nextInt();
       if(n>0)
         {
            int[] arr=new int[n];
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextInt();

           if(n>1)
             segregatePosAndNeg(arr);
             System.out.println("Segregated Array :");
             for(int i=0;i<n;i++)
                System.out.println(arr[i]);
         }
         else
            System.out.println("Invalid Choice");
   }

   public static void segregatePosAndNeg(int[]arr)
   {
       mergeSort(arr,0,arr.length-1);
   } 
   
   public static void mergeSort(int[]arr,int lb,int ub)
   {
      if(lb<ub)
      {
          int mid=(lb+ub)/2;
          mergeSort(arr,lb,mid);
          mergeSort(arr,(mid+1),ub);
          modifiedMerge(arr,lb,mid,ub);
      }
   }
   
   public static void modifiedMerge(int[] arr,int lb,int mid,int ub)
   {
     int m=(mid-lb+1);
     int n=(ub-mid);
     int[] Left=new int[m];
     int[] Right=new int[n];  
   
     for(int i=0;i<m;i++)
        Left[i]=arr[lb+i];
        
     for(int i=0;i<n;i++)
        Right[i]=arr[mid+1+i];
        
        int i=0,j=0,k=lb;
        // copy negative elements of left sublist  
        while(i<m && Left[i]<0)
          arr[k++]=Left[i++];
        // copy negative elements of Right sublist
        while(j<n && Right[j]<0)
          arr[k++]=Right[j++];
        // copy Positive elements of Left sublist  
        while(i<m)
          arr[k++]=Left[i++];
        // copy Positive elements of Right sublist  
        while(j<n)
          arr[k++]=Right[j++];  
   } 
}



//Optimal Approach
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array");
       int n=sc.nextInt();
       if(n>0)
         {
            int[] arr=new int[n];
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextInt();

           if(n>1)
             segregatePosAndNeg(arr);
             System.out.println("Segregated Array :");
             for(int i=0;i<n;i++)
                System.out.println(arr[i]);
         }
         else
            System.out.println("Invalid Choice");
   }

   public static void segregatePosAndNeg(int[]arr)
   {
      modifiedInsertionSort(arr);
   }
   
   public static void modifiedInsertionSort(int[] arr)
   {
      for(int i=1;i<arr.lenth;i++)
      {
        int temp=arr[i];
         //if current element is positive do nothing
        if(temp>0)
         continue;
         
        /* if current element is negative,
            shift positive elements of arr[j],
            to one position to their right */
         int j=i-1;   
         while(j>=0 && arr[j]>0)
         {
            arr[j+1]=arr[j];
            j--;
         }
         arr[j+1]=temp;  
       }
    }
}
