//Bruteforce Approach(Sort in Ascending Order using inbuilt Arrays.sort() Method or by using any Sorting Algorithm and return Kth Element From the Begining)
import java.util.*;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
            int[] arr=new int[n];
             
            System.out.printf("Enter %d Elements:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
                
            System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
               System.out.println(arr[i]);
                 
            System.out.println("Entered K:");
            int k=sc.nextInt();
            
            if(k>=1 && k<=n)
            {
                Arrays.sort(arr);
                System.out.printf("%d rd/th Smallest Element is %d",k,arr[k-1]);
            }
            else
              System.out.println("Invalid Choice");  
       }
       else
           System.out.println("Invalid Choice");
       
   }
}


//Bruteforce Approach(Sort in Ascending Order till (k-1)th Index and return arr[k-1])
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
            int[] arr=new int[n];
             
            System.out.printf("Enter %d Elements:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
                
            System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
               System.out.println(arr[i]);
                 
            System.out.println("Entered K:");
            int k=sc.nextInt();
            if(k>0 && k<=n)
               System.out.printf("%d rd/th Smallest Element is %d",k,ascendingSort(arr,k));
            else
               System.out.println("Invalid Choice");
       }
       else
          System.out.println("Invalid Choice");
   }
   
    
   public static int ascendingSort(int[]arr,int k)
   {
      int n=arr.length;
      for(int i=0;i<n;i++)
      {
          for(int j=i+1;j<n;j++)
            if(arr[i]>arr[j])
            {
               //Swapping
              int temp=arr[i];
              arr[i]=arr[j];
              arr[j]=temp;
            } 
             
           if(i==(k-1))
             break;
      }
      return arr[k-1];          
   }
}


//Better Approach
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
           int[] arr=new int[n];
             
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
                
           System.out.println("Entered Elements are:");
           for(int i=0;i<n;i++)
               System.out.println(arr[i]);
                 
            System.out.println("Enter K:");
            int k=sc.nextInt();
            if(k>0 && k<=n)
               System.out.printf("%d rd/th Smallest Element is %d",k,modifiedOptimisedDescendingBubbleSort(arr,k));
       }
       else
          System.out.println("Invalid Choice");
   }

   public static int modifiedOptimisedDescendingBubbleSort(int[]arr,int k)
   {
      int n=arr.length;
      for(int pass=1;pass<=k;pass++)
      {
          boolean swap=false;
          for(int j=0;j<(n-pass);j++)
            if(arr[j]<arr[j+1])
            {
                 swap=true;
                 //Swapping
                 int temp=arr[j];
                 arr[j]=arr[j+1];
                 arr[j+1]=temp;
            }
              
           if(swap==false)
             break;
      }
      return arr[n-k];
   }
} 


//***(Other  Approaches to Solve this Problem will be  provided soon)
