/*

Subsequence : 

> A subsequence is a sequence that can be derived from another sequence by removing zero or more elements, without changing the order of the remaining elements.
> Subsequence need not to be contigious (i.e may or may not be contigious)
> For a sequence/array/string of size n, we can have 2^n Subsequence in total i.e ((2^n)-1) non-empty sub-sequences + 1 Empty Subsequence. 
> Every Subarray is a Subequence but not every subsequence is an subarray.
> Subsequence always maintain orer of appearence.
> Subarray/Substring are always contigious and maintains order of appearence of elements while subsequence may or maynot be contigious but always maintains order of appearence of elements.
> For a sequence/array/string of size n, we can have  ( (n*(n+1))/2 + 1 ) Subarray in total i.e (n*(n+1))/2 non-empty subarray + 1 Empty subarray. 

>Subsets:

Subsets and subsequence ae exactly same thing the only difference between them is that subsequence should maintain order of appearence of elements while subsets 
don't need to preserve order of appearence of elements for ex : {1,2} and {2,1} represent the same subset however while writing/listing the subsets of the sets 
you can either write {1,2} or {2,1} it doesnot matter but you can not list both at the same time since they are exactly the same thing.

>For example : arr[] = {1, 2, 3, 4}; there are 16 sub-sequences. 

They are 
{ } => (Subarray and subsequence)
(1) => (Subarray and subsequence)
(1,2) => (Subarray and subsequence)
(1,3) =>(Only subsequence) Reason : Its not contigious
(1,4) =>(Only subsequence) Reason : Its not contigious
(1,2,3) => (Subarray and subsequence)
(1,2,4) =>(Only subsequence) Reason : Its not contigious
(1,3,4) =>(Only subsequence) Reason : Its not contigious
(1,2,3,4) => (Subarray and subsequence)
(2) => (Subarray and subsequence)
(2,3) => (Subarray and subsequence)
(2,4) =>(Only subsequence) Reason : Its not contigious
(2,3,4) => (Subarray and subsequence)
(3) => (Subarray and subsequence)
(3,4) => (Subarray and subsequence)
(4) => (Subarray and subsequence)


The total number of subsets/subsequence of any given set is equal to 2^ (no. of elements in the set).It is nothing but binary numbers from 0 to (2^n)-1. 
 
>For example : arr[] = {1, 2, 3, 4}; there are 16 (i.e 2^4) sub-sequences.
 If we carefully notice it is nothing but binary numbers from 0 to 15 which can be shown as below: 

0000    {} 
 
0001    {1} 
 
0010    {2} 
 
0011    {1, 2} 
 
0100    {3} 
 
0101    {1, 3} 
 
0110    {2, 3} 
 
0111    {1, 2, 3} 
 
1000    {4} 
 
1001    {1, 4} 
 
1010    {1, 4} 
 
1011    {1, 2, 4} 
 
1100    {3, 4} 
 
1101    {1, 3, 4} 
 
1110    {2, 3, 4} 
 
1111    {1, 2, 3, 4} 
 
 

Starting from right,whenever we encounter set bit(1) in a number at ith position the we print the element present at (i-1)th index in the array. 
*/

//Bruteforce Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
          Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of the array :");
	  int n=sc.nextInt();
	  if(n<=0)
	  {
	     System.out.println("Invalid Choice");
	     return;
	  }
	  
	  int[] arr=new int[n];
	  System.out.println("Enter "+n+" Elements :");
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		 
	  allPossibleSubsequencesOrSubset(arr,n);
	}
	
	public static void allPossibleSubsequencesOrSubset(int[] arr,int n)
        {
           int powerSetSize=1<<n; // Math.pow(2,n)=1<<n (x<<y = x*(2^y))

           for(int num=0;num<powerSetSize;num++)
           {
              System.out.print("{");
          
              for(int i=0;i<n;i++)
                if(((1<<i)&num)!=0)
                  System.out.print(arr[i]+" ");
                
              System.out.println("}");
           }
	}
}

/*

Observation 1 :
Above Program will only work for array having size <=30

Reason :

Integer.MAX_VALUE=(2^31)-1 = 2147483647
Integer.MIN_VALUE= -2^31 = -2147483648

if(n==31) then 1<<31 = -2^31 = -2147483648

Possible Fix :

public static void allPossibleSubsequencesOrSubset(int[] arr,int n)
{
      long powerSetSize=(long)1<<n; // Math.pow(2,n)=1<<n (x<<y = x*(2^y))

      for(long num=0;num<powerSetSize;num++)
      {
          System.out.print("{");
          
          for(int i=0;i<n;i++)
              if(((1<<i)&num)!=0)
                System.out.print(arr[i]+" ");
                
          System.out.println("}");
      }
}
  
  But again the above program will only work for array having size <=62
  
  Reason :
  
  Long.MAX_VALUE =  2^63 -1 = 9,223,372,036,854,775,807.
  Long.MIN_VALUE = -2^63 = -9,223,372,036,854,775,808.
  
  if(n==63) then (long)1<<63 = -2^63 = -9,223,372,036,854,775,808

-------------------------------------------------------------------------------------------------------------------------------------------------------
  
Observation 2 :
  
If an Integer is bitwise left shift by more than 31 bits following pattern is observed.
  
public class Main
{
  public static void main(String[] args) {
    
    for(int i=0;i<64;i++)
    {
        int n=1<<i;
        System.out.println(n);
    }
  }
}

Output :
1
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
16777216
33554432
67108864
134217728
268435456
536870912
1073741824
-2147483648 (Integer.MIN_VALUE)  (when i =31 i.e 1<<31)  
1 (when i =32 i.e 1<<32)
2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304
8388608
16777216
33554432
67108864
134217728
268435456
536870912
1073741824
-2147483648 (Integer.MIN_VALUE) (when i =63 i.e 1<<63)
*/


//Recurssive Approach :

import java.util.*;
public class Test
{
	public static void main(String[] args) {
          Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of the array :");
	  int n=sc.nextInt();
	  if(n<=0)
	  {
	     System.out.println("Invalid Choice");
	     return;
	  }
	  
	  int[] arr=new int[n];
	  System.out.println("Enter "+n+" Elements :");
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		 
	  driver(arr,n);
	}
	
	public static void driver(int[] arr,int n)
	{
	   int[] subsequence=new int[n];
	   allPossibleSubsequencesOrSubset(arr,n,0,subsequence,0); 
	}
	
	public static void allPossibleSubsequencesOrSubset(int[] arr,int n,int arrIdx,int[] ss,int ssIdx)
        {
           if(arrIdx==n)
           {
             printSubsequence(ss,ssIdx);  
             System.out.println();
           }
           else
           {
             //Include element
             ss[ssIdx]=arr[arrIdx];
             allPossibleSubsequencesOrSubset(arr,n,arrIdx+1,ss,ssIdx+1);
             //Exclude element
             allPossibleSubsequencesOrSubset(arr,n,arrIdx+1,ss,ssIdx); 
           }
	}
	
	public static void printSubsequence(int[]ss,int ssIdx)
	{
	    boolean visited=false;
	    System.out.print("{");
	    for(int i=0;i<ssIdx;i++)
	    {
	      System.out.print(ss[i]);
	      visited=true;
	    }
	    if(visited==false)
	      System.out.print("Empty Set");
	    System.out.print("}");
	}
}

//Aliter Implementation

import java.util.*;
public class Test
{
	public static void main(String[] args) {
          Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of the array :");
	  int n=sc.nextInt();
	  if(n<=0)
	  {
	     System.out.println("Invalid Choice");
	     return;
	  }
	  
	  int[] arr=new int[n];
	  System.out.println("Enter "+n+" Elements :");
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		 
	  driver(arr,n);
	}
	
	public static void driver(int[] arr,int n)
	{
	   String subsequence="";
	   allPossibleSubsequencesOrSubset(arr,n,0,subsequence); 
	}
	
	public static void allPossibleSubsequencesOrSubset(int[] arr,int n,int arrIdx,String ss)
        {
          if(arrIdx==n)
          {
            System.out.print("{");
        
            if(ss.equals(""))
              System.out.print("Empty Set");
            else
              System.out.print(ss);
         
            System.out.println("}");
          }
          else
          {
            //Include element
            allPossibleSubsequencesOrSubset(arr,n,arrIdx+1,ss+arr[arrIdx]+" ");
            //Exclude element
            allPossibleSubsequencesOrSubset(arr,n,arrIdx+1,ss); 
          }
	}
}
