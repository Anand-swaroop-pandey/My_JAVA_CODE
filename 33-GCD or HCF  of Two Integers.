//Iterative Approach

import java.util.Scanner;
class Test
{
    public static void main(String[] args) 
    {
         Scanner sc=new Scanner(System.in);
         int num1=sc.nextInt();
         int num2=sc.nextInt();
          System.out.println(HCF(num1,num2));
    }
    
    public static int HCF(int num1,int num2)
    {
        int minNum=Math.min(num1,num2);
        int temp=minNum;
        
        while(true)
        {
            if((num1%temp)==0 && (num2%temp)==0)
               return temp;        
            temp=temp-1;
        }
    }
}


//Improved Iterative Approach

import java.util.Scanner;
class Test
{
    public static void main(String[] args) 
    {
         Scanner sc=new Scanner(System.in);
         int num1=sc.nextInt();
         int num2=sc.nextInt();
          System.out.println(HCF(num1,num2));
    }
    
    
    public static int HCF(int num1,int num2)
    {
        int minNum=Math.min(num1,num2);
        
        if(Math.max(num1,num2)%minNum==0)
          return minNum;
        
        for(int temp=(minNum/2);temp>1;temp--)
          if((num1%temp)==0 && (num2%temp)==0)
              return temp;
              
        return 1;
    }
}

//Recurssive Approaches 

import java.util.Scanner;
class Test
{
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
       int num1=sc.nextInt();
       int num2=sc.nextInt();
       System.out.println(driver(num1,num2));
    }
    
    
    public static int driver(int num1,int num2)
    {
       int minNum=Math.min(num1,num2); 
       
       if(Math.max(num1,num2)%minNum==0)
          return minNum;
          
       return HCF(num1,num2,minNum/2);
    }
	
	
    public static int HCF(int num1,int num2,int temp)
    {
        if((num1%temp)==0 && (num2%temp)==0)
           return temp;
              
        return HCF(num1,num2,temp-1);      
    }
}


//Optimal Approach :(Euclidean algorithm)

import java.util.Scanner;
class Test
{
    public static void main(String[] args) 
    {
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int num2=sc.nextInt();
        System.out.println(GCD(num1,num2));
    }
    
    
    public static int driver(int num1,int num2)
    {
       return GCD(Math.min(num1,num2),Math.max(num1,num2));
    }
	
    public static int GCD(int divisor,int dividend)
    {
        int rem=dividend%divisor;
	if(rem==0)
	   return divisor;
	      
	return GCD(rem,divisor);      
    }
}


//Aliter (Compressed Version)

import java.util.Scanner;
class Test
{
    public static void main(String[] args) 
    {
       Scanner sc=new Scanner(System.in);
       int num1=sc.nextInt();
       int num2=sc.nextInt();
       System.out.println(GCD(num1,num2));
    }

    public static int GCD(int divisor,int dividend)
    {
        int rem=dividend%divisor;
	if(rem==0)
	   return divisor;
	      
	return GCD(rem,divisor);      
    }
}
