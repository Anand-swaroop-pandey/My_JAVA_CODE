//Method 1
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
    public static int findDuplicate(int[]arr)
    {
      int n=arr.length,res=-1;
      for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
           if(arr[i]==arr[j])
           {
             res=arr[i];
             break;
           }
            
      return res;
    }
}

//Method 2

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
    public static int findDuplicate(int[]arr)
    {
      HashMap<Integer,Integer>hm=new HashMap<>();
      int n=arr.length,res=-1;
        
      for(int i=0;i<n;i++)
       if(hm.containsKey(arr[i]))
         hm.put(arr[i],hm.get(arr[i])+1);
       else
         hm.put(arr[i],1);
        
       for(int key:hm.keySet())
          if(hm.get(key)>=2)
          {
            res=key;
            break;
          }
        
       return res;
    }
}

//Method 3

import java.util.*;
public class Test
{
   	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
  public static int findDuplicate(int[]arr)
  {
      int n=arr.length,res=-1;
      int[] count=new int[n];
      
      for(int i=0;i<n;i++)
         count[arr[i]-1]++;
      
      for(int i=0;i<n;i++)
        if(count[i]>=2)
        {
           res=i+1;
           break;
        }
             
       return res;
  }
}

//Method 4

import java.util.*;
public class Test
{
     public static void main(String[] args) {
	 Scanner sc=new Scanner(System.in);
	 System.out.println("Enter the Size of the Array :");
         int n=sc.nextInt();
         if(n<1)
         {
           System.out.println("Invalid Choice");
           return;
	 }
	 int[] arr=new int[n];
         System.out.printf("Enter %d Elements Of The Array :\n",n);
         for(int i=0;i<n;i++)
           arr[i]=sc.nextInt();
	
	 System.out.println("Repeating Element is :"+findDuplicate(arr));
  }
	
  public static int findDuplicate(int[]arr)
  {
      HashSet<Integer>hs=new HashSet<>();
      int n=arr.length,res=-1;
        
      for(int i=0;i<n;i++)
       if(hs.contains(arr[i]))
       {
          res=arr[i];
          break;
       }
       else
         hs.add(arr[i]);
        
       return res;
  }
}

//Method 5

import java.util.*;
public class Test
{
   	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
  public static int findDuplicate(int[]arr)
  {
      int n=arr.length,res=-1;
      int[] count=new int[n];
      
      for(int i=0;i<n;i++)
      {
        if(count[arr[i]-1]==1)
        {
           res=arr[i];
           break;
        }
        count[arr[i]-1]++;  
      }
        
      return res;
  }
}

//Method 6

import java.util.*;
public class Test
{
   	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
  public static int findDuplicate(int[]arr)
  {
      Arrays.sort(arr);
      int n=arr.length,res=-1;
      for(int i=0;i<n-1;i++)
         if(arr[i]==arr[i+1])
         {
            res=arr[i];
            break;
         }         
      return res;
  }
}

//Method 7

import java.util.*;
public class Test
{
    	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
    public static int findDuplicate(int[]arr)
    {
      Arrays.sort(arr);
      int n=arr.length,res=-1;
      for(int i=0;i<n;i++)
        if(areFirstAndLastIndexEqual(arr,arr[i])==false)
        {
            res=arr[i];
            break;
        }
        
      return res;
    }
    
    public static boolean areFirstAndLastIndexEqual(int [] arr,int key)
    {
        int first=firstIndex(arr,key);
        int last=lastIndex(arr,key);
        if(first!=last)
          return false;
        else
          return true;
    }
	
	
   public static int firstIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int first=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             first=mid;
             high=mid-1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return first;
   }
   
   
   public static int lastIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int last=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             last=mid;
             low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return last;
   }
}

//Method 8

import java.util.*;
public class Test
{
   	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
       	  int n=sc.nextInt();
	  if(n<1)
  	  {
 	     System.out.println("Invalid Choice");
 	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
   	    arr[i]=sc.nextInt();
	
	  System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
    public static int findDuplicate(int[]arr)
    {
      int n=arr.length,res=-1;
      boolean[] visited=new boolean[n];
      for(int i=0;i<n;i++)
      {
         int ele=arr[i];
         int idx=ele-1;
         if(visited[idx]==true)
         {
           res=ele;
           break;
         }
         visited[idx]=true;
      }
      return res; 
    }
}

//Method 9

import java.util.*;
public class Test
{
    public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter the Size of the Array :");
	int n=sc.nextInt();
	if(n<1)
	{
	   System.out.println("Invalid Choice");
	   return;
	}
	int[] arr=new int[n];
	System.out.printf("Enter %d Elements Of The Array :\n",n);
        for(int i=0;i<n;i++)
	  arr[i]=sc.nextInt();
		  
	System.out.println("Repeating Element is :"+findDuplicate(arr));
  }
	
  public static int findDuplicate(int[]arr)
  {
      int n=arr.length,res=-1;
      for(int i=0;i<n;i++)
      {
         int ele=Math.abs(arr[i]);
         int idx=ele-1;
	 
         if(arr[idx]<0)
         {
           res=ele;
           break;
         }
	 arr[idx]*=-1;
      }
      return res;
  }
}

//Method 10
//Cyclic Sort

import java.util.*;
public class Test
{
    public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
	System.out.println("Enter the Size of the Array :");
	int n=sc.nextInt();
	if(n<1)
	{
	   System.out.println("Invalid Choice");
	   return;
	}
	
	int[] arr=new int[n];
	System.out.printf("Enter %d Elements Of The Array :\n",n);
        for(int i=0;i<n;i++)
	  arr[i]=sc.nextInt();
		  
	System.out.println("Repeating Element is :"+findDuplicate(arr));
    }
	
    public static int findDuplicate(int[]arr)
    {
        int n=arr.length,i=0;
        while(i<n)
        {
           int correctIndex=arr[i]-1;
           if (arr[i]==arr[correctIndex])
	      i++;
	   else
           {
             int temp=arr[correctIndex];
             arr[correctIndex]=arr[i];
             arr[i]=temp;
           }      
        }  
        
	return arr[n-1];
        /* 
	OR
	int res=-1;
        for (i=0; i<n; i++) 
           if(arr[i]!=i+1)
           {
              res=arr[i];
              break;
           }
	   
	 return res;
	*/  
    }
}

/*
 Ex-1:
 
 int[] arr={1,3,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,4,3,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=4;
 correctIndexOf 4 in a sorted Array =3;
 clearly 4 is not at its Correct index
 so Swap(arr[1],arr[3]);
 
 Resultant Array :
 arr={1,2,3,4,2};
 
 Now 4 is at its Correct Index.i.e 3
 
 
 Iteration 4 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index i.e 1
 so i++;
 
 
 Iteration 5 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 6 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 Iteration 7 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 4 is at its Correct index i.e 1
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr={1,2,3,4,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4).
 
 /*Optimisation
 if you observe carefully ,the Duplicate number will automatically get segregated at last index (in this case its 4) 
 coz other elements have taken their correct correct position so only place left is last index 
 (the elements are in range of [1,n] so their correct index would be arr[i]-1,i.e for 1 correct index =0 similarly for 'n' correct index =(n-1),so the nth index is left vacant(coz array is of Size (n+1))
 */
 
 Ex-2
  
 int[] arr={1,3,2,4,2,2};
 
 Iteration 1 :(i==0)
 arr[0]=1;
 correctIndexOf 1 in a sorted Array =0;
 clearly 1 is at its Correct index i.e 0
 so i++;
 
 Iteration 2 :(i==1)
 arr[1]=3;
 correctIndexOf 3 in a sorted Array =2;
 clearly 3 is not at its Correct index
 so Swap(arr[1],arr[2]);
 
 Resultant Array :
 arr={1,2,3,4,2,2};
 
 Now 3 is at its Correct Index.i.e 2
 
 
 Iteration 3 :(i==1)
 arr[1]=2;
 correctIndexOf 2 in a sorted Array =1;
 clearly 2 is at its Correct index i.e 1
 so i++
 
 
 Iteration 4 :(i==2)
 arr[2]=3;
 correctIndexOf 3 in a sorted Array = 2;
 clearly 3 is at its Correct index i.e 2
 so i++;
 
 
 Iteration 5 :(i==3)
 arr[3]=4;
 correctIndexOf 4 in a sorted Array = 3;
 clearly 4 is at its Correct index i.e 3
 so i++;
 
 
 Iteration 6 :(i==4)
 arr[4]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index
 so i++;


 Iteration 7 :(i==5)
 arr[5]=2;
 correctIndexOf 2 in a sorted Array = 1;
 clearly 2 is at its Correct index.
 so i++;
 
 //Loop terminates
 
 final Arrray:
 int[] arr=arr={1,2,3,4,2,2};
 
 now print the element which is not at its correct index i.e arr[i]!=i+1
 Thus the Duplicate number is 2(at index 4 or 5).
  
*/

//Method 11


