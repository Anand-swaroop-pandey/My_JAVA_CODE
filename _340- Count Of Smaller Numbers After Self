//Bruteforce Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
      	 Scanner sc=new Scanner(System.in);
         System.out.println("Enter the Size of the Array");
         int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            countSmaller(arr,n);
         }
         else
           System.out.println("Invalid Choice");
    }
    
    public static void countSmaller(int arr[], int n)
    {
      for(int i=0;i<n;i++)
      {
         int cnt=0;
         for(int j=i+1;j<n;j++)
          if(arr[j]<arr[i])
            cnt++;
        System.out.printf("To The Right Of %d There Are %d Smaller Elements\n",arr[i],cnt);
      }
    }
}


//Better Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
     	Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            countSmaller(arr,n);
         }
         else
           System.out.println("Invalid Choice");
    }
    
    
    public static void countSmaller(int arr[], int n)
    {
        ArrayList<Integer>sorted=new ArrayList();
        
        for(int val : arr)
          sorted.add(val);
    
        Collections.sort(sorted);
        
        int[] count=new int[n];
          
        for(int i = 0; i<n; i++)
        {
            int index=firstIndex(sorted,arr[i]);
            count[i]=index;
            sorted.remove(index);
        }

        System.out.printf("{");
        for(int i=0;i<n;i++)
          System.out.printf(count[i]+" ");
        System.out.printf("}");
    }
    

    public static int firstIndex(ArrayList<Integer>arr, int key)
    {
        int low=0,high=arr.size()-1,first=-1;
        while(low<=high)
        {
            int mid =(high+low)/2;
            int val=arr.get(mid);
            if(val==key)
            {
              first=mid;
              high=mid-1;
            }
            else if(key>val)
              low= mid + 1;
            else if(key<val)
              high=mid - 1;
        }
        return first;
    }
}


//Optimal Approach  //for Best Explanation : https://youtu.be/_sA1xI4XK0c
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
     	Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            countSmaller(arr,n);
         }
         else
           System.out.println("Invalid Choice");
    }
    
    
    public static void countSmaller(int arr[], int n)
    {
        int[] count=new int[n];
        int[] originalIndex = new int[n];

        for(int i=0;i<n;i++)
          originalIndex[i]=i;

        mergeSort(arr,0,n-1,count,originalIndex);
        
        System.out.printf("{");
        for(int i=0;i<n;i++)
          System.out.printf(count[i]+" ");
        System.out.printf("}");
    }
    
    
    public static void mergeSort(int[] arr, int lb, int ub,int[] count,int[] originalIndex)
    {
        if(lb<ub)
        {
          int mid = (lb+ub)/2;
          mergeSort(arr,lb, mid,count,originalIndex);
          mergeSort(arr, mid+1,ub,count,originalIndex);
          merge(arr,lb, mid,ub,count,originalIndex);  
        }
    }

    public static void merge(int[] arr, int lb, int mid, int ub,int[] count,int[] originalIndex)
    {
      int i=lb,j=mid+1,k=0;
     
      int[] new_indexes=new int[ub-lb+1];
      int[] temp=new int[ub-lb+1];
     
      while(i<=mid && j<=ub)
        if(arr[i]>arr[j])
        {
            count[originalIndex[i]]+=(ub-j+1);
            temp[k]=arr[i];
            new_indexes[k]=originalIndex[i];
            i++;
            k++;
        }
        else// (arr[i]<=arr[j])
        {
           temp[k]=arr[j];
           new_indexes[k]=originalIndex[j];
           j++;
           k++;
        }
         
      
       while(j<=ub)
       {
          temp[k]=arr[j]; 
          new_indexes[k]=originalIndex[j];
          j++;
          k++;
       }
         

       while(i<=mid)
       {
         temp[k]=arr[i];  
         new_indexes[k]=originalIndex[i];
         i++;
         k++;
       }
         
         
       k=0;
       for(int index=lb;index<=ub;index++)
       {
          arr[index]=temp[k];
          originalIndex[index]=new_indexes[k];
          k++;
       }         
    }
}


/*
  For Method 2 :(Dry Run)
  
  Index=>   0 1 2 3 4 5 6 7 8 9 10  
     arr[]={5,2,4,6,1,2,9,1,6,5,8};
     
 Index=>    0 1 2 3 4 5 6 7 8 9 10
  Sorted[]={1,1,2,2,4,5,5,6,6,8,9};
  
  
  Iteration 1 :(i=0,arr[i]=5)
  firstIndex(5)=5
  count[0]=5;
  sorted.remove(5);
  
  (Updated Sorted[])
 Index=>    0 1 2 3 4 5 6 7 8 9
  Sorted[]={1,1,2,2,4,5,6,6,8,9};
  
  Iteration 2 :(i=1,arr[i]=2)
  firstIndex(2)=2
  count[1]=2;
  sorted.remove(2);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 8
  Sorted[]={1,1,2,4,5,6,6,8,9};
  
  Iteration 3 :(i=2,arr[i]=4)
  firstIndex(4)=3
  count[2]=3;
  sorted.remove(3);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 
  Sorted[]={1,1,2,5,6,6,8,9};
  
  Iteration 4 :(i=3,arr[i]=6)
  firstIndex(6)=4
  count[3]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 
  Sorted[]={1,1,2,5,6,8,9};
  
  Iteration 5 :(i=4,arr[i]=1)
  firstIndex(1)=0
  count[4]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 
  Sorted[]={1,2,5,6,8,9};
  
  Iteration 6 :(i=5,arr[i]=2)
  firstIndex(2)=1
  count[5]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 
  Sorted[]={1,5,6,8,9};
  
  Iteration 7 :(i=6,arr[i]=9)
  firstIndex(9)=4
  count[6]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 
  Sorted[]={1,5,6,8};
  
  Iteration 8 :(i=7,arr[i]=1)
  firstIndex(1)=0
  count[7]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 
  Sorted[]={5,6,8};
  
  Iteration 9 :(i=8,arr[i]=6)
  firstIndex(1)=1
  count[8]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 
  Sorted[]={5,8};
  
  Iteration 10 :(i=9,arr[i]=5)
  firstIndex(5)=0
  count[9]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 
  Sorted[]={8};
  
  Iteration 11 :(i=10,arr[i]=8)
  firstIndex(8)=0
  count[10]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Sorted[]={};
  
  Therefore;
  count[]={5 2 3 4 0 1 4 0 1 0 0 }
*/

/*
Other Approaches :(Will be Updated Soon) 

->Using Binary Search Tree 
->Balanced Binary Search Tree
->Binary Indexed Tree/Fenwick Tree
->Segment Tree
*/
