//Bruteforce Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
      	 Scanner sc=new Scanner(System.in);
         System.out.println("Enter the Size of the Array");
         int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            countSmaller(arr,n);
         }
         else
           System.out.println("Invalid Choice");
    }
    
    public static void countSmaller(int arr[], int n)
    {
      for(int i=0;i<n;i++)
      {
         int cnt=0;
         for(int j=i+1;j<n;j++)
          if(arr[j]<arr[i])
            cnt++;
        System.out.printf("To The Right Of %d There Are %d Smaller Elements\n",arr[i],cnt);
      }
    }
}


//Optimal Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
     	Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            countSmaller(arr,n);
         }
         else
           System.out.println("Invalid Choice");
    }
    
    
    public static void countSmaller(int arr[], int n)
    {
        int n=arr.length;
        int[] count=new int[n];
        int[] originalIndex = new int[n];

        for(int i=0;i<n;i++)
          originalIndex[i]=i;

        mergeSort(arr,0,n-1,count,originalIndex);
        
        for(int i=0;i<n;i++)
          System.out.printf("To the right of %d there are %d smaller elements\n",arr[i],count[i]);
    }
    
    
    public static void mergeSort(int[] arr, int lb, int ub,int[] count,int[] originalIndex)
    {
        if(lb<ub)
        {
          int mid = (lb+ub)/2;
          mergeSort(arr,lb, mid,count,originalIndex);
          mergeSort(arr, mid+1,ub,count,originalIndex);
          merge(arr,lb, mid,ub,count,originalIndex);  
        }
    }

    public static void merge(int[] arr, int lb, int mid, int ub,int[] count,int[] originalIndex)
    {
      int i=lb,j=mid+1,k=0,idx=0;
     
      int[] new_indexes=new int[ub-lb+1];
      int[] temp=new int[ub-lb+1];
     
      while(i<=mid && j<=ub)
        if(arr[i]>arr[j])
        {
            count[originalIndex[i]]+=(ub-j+1);
            temp[k++]=arr[i];
            new_indexes[idx++]=originalIndex[i];
            i++;
        }
        else// (arr[i]<=arr[j])
        {
           temp[k++]=arr[j];
           new_indexes[idx++]=originalIndex[j];
           j++;
        }
         
      
       while(j<=ub)
       {
          temp[k++]=arr[j]; 
          new_indexes[idx++]=originalIndex[j];
          j++;
       }
         

       while(i<=mid)
       {
         temp[k++]=arr[i];  
         new_indexes[idx++]=originalIndex[i];
         i++;
       }
         
         
       k=0;
       idx=0;
       for(int index=lb;index<=ub;index++)
       {
          arr[index]=temp[k++];
          originalIndex[index]=new_indexes[idx++];   
       }         
    }
}

/*(Will be Updated Soon) 
Other Approaches
->Using BST 
->Balanced Binary Search Tree
->Binary Search
->Segment Tree
->Binary Indexed Tree
*/
