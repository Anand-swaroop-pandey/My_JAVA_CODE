import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array");
       int n=sc.nextInt();
       if(n>0)
         {
             int[] arr=new int[n];
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextInt();
            System.out.println("Enter KEY:");
            int key=sc.nextInt();
            int res=linearSearch(arr,key);
            if(res==-1)
               System.out.printf("%d doesnot exists in the Array",key);
            else
               System.out.printf("First occurence of %d is Found at index %d in the Array",key,res);
         }
         else
            System.out.println("Invalid Choice");
       
   }
   public static int linearSearch(int []arr,int key)
   {
      for(int i=0;i<arr.length;i++)
         if(arr[i]==key)
           return i;
      return -1;       
   }
}

//Optimised Linear Search(using 2 pointers)

import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array");
       int n=sc.nextInt();
       if(n>0)
         {
             int[] arr=new int[n];
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextInt();
            System.out.println("Enter KEY:");
            int key=sc.nextInt();
            int res=linearSearch(arr,key);
            if(res==-1)
               System.out.printf("%d doesnot exists in the Array",key);
            else
               System.out.printf("First occurence of %d is Found at index %d in the Array",key,res);
         }
         else
            System.out.println("Invalid Choice");
       
   }
   public static int linearSearch(int []arr,int key)
   {
       int start=0;
       int end=arr.length-1;
      while(start<=end)
      {
          if(arr[start]==key)
            return start;
          else if(arr[end]==key)
            return end; 
           start++;
           end--;
      }
         
      return -1;       
   }
}
