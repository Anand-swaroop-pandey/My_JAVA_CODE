//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter N:");
	    int n=sc.nextInt();
	    System.out.printf("Total Number of Set Bits from 1 to %d is %d",n,countSetBitstillN(n));
	}
    
        public static int countSetBitstillN(int n)
        {
	   int count=0;
	   for(int num=1;num<=n;num++)
	      for(int k=0;k<32;k++)
                 if(checkKthBit(num,k)!=0)
                    count++;
          return count;
        }
	
        public static int checkKthBit(int num,int k)
	{
	   int mask=1<<(k);
	   int res=num & mask;
	   return res;
	}
}


//Better Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter N:");
	    int n=sc.nextInt();
	    System.out.printf("Total Number of Set Bits from 1 to %d is %d",n,countSetBitstillN(n));
	}
    
        public static int countSetBitstillN(int n)
        {
	   int count=0;
	   for(int i=1;i<=n;i++)
              count+= countSetBits(i);  
	      
           return count;
        }
	
        public static int countSetBits(int num)//Kernighan's Algorithm
        {
	   int count=0;
           while(num!=0)
           {
	     int rmsbm=rMSBM(num);
             num=num-rmsbm; 
             count++;  
           }
         return count;
       }
	   
       public static int rMSBM(int num)
       {
	 int rmsbm=num & twosCompliment(num);
	 return rmsbm;
       }
	 
       public static int twosCompliment(int num)
       {
         return -num;//return (~num+1);
       }
} 


//Optimal Approach

import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter N:");
	    int n=sc.nextInt();
	    System.out.printf("Total Number of Set Bits from 1 to %d is %d",n,countSetBitstillN(n));
	}
    
        public static int countSetBitstillN(int n)
        {
	   if(n==0)
	    return 0;
	   
	   int x=largestPowerOf2InRange(n);
	   int part1=(int)Math.pow(2,x-1)*x;
	   int part2=n-(int)Math.pow(2,x)+1;
	   int rest=n-(int)Math.pow(2,x);
	   int part3=countSetBitstillN(rest);
	   int count1=part1+part2+part3;
	   return count1;
       }
	
       public static int largestPowerOf2InRange(int num)
       {
	  int power=0;
	  while(true)
	    if((int)Math.pow(2,power)<=num)
	       power++;
	    else
	       break;
	       
	   return (power-1);
       }
}


//further Optimised Approach

import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter N:");
	    int n=sc.nextInt();
	    System.out.printf("Total Number of Set Bits from 1 to %d is %d",n,countSetBitstillN(n));
	}
    
        public static int countSetBitstillN(int n)
        {
	   if(n==0)//No Set Bits In 0 so return 0
	    return 0;
	   
	   int x=largestPowerOf2InRange(n);
	   int part1=(1<<(x-1))*x;   //(1<<(x-1))*x => (2^(x-1))*x
	   int part2=n-(1<<x)+1;    //n-(1<<x)+1 => n-(2^x)+1
	   int rest=n-(1<<x);      //n-(1<<x) => n-(2^x) 
	   int part3=countSetBitstillN(rest);
	   int count1=part1+part2+part3;
	   return count1;
       }
	
       public static int largestPowerOf2InRange(int num)
       {
	  int power=0;
	  while((1<<power)<=num)    //(1<<power)<=num => (2^power)<=num
	     power++;
	     
	  return (power-1);
       }
}

//Note: x<<y = x*2^y
//Note: x>>y = x/(2^y)
