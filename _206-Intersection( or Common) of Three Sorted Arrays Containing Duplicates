//Bruteforce Approach
import java.util.*;
public class Test
{
     public static void main(String[] args) 
     {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       
       System.out.println("Enter the Size of the Array3");
       int o=sc.nextInt();
       
       if(m>0 && n>0 && o>0)
       {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
            int[] arr3=new int[o];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array3:\n",o);
           for(int i=0;i<o;i++)
              arr3[i]=sc.nextInt();
           
            System.out.print("Intersection of both the Arrays is: ["+intersectionOfThreeSortedArrayContainingDuplicates(arr1,arr2,arr3)+"]");  
       }
       else
         System.out.println("Invalid Choice");          
     }
	
	
    public static String intersectionOfThreeSortedArrayContainingDuplicates(int[] arr1,int[] arr2,int[] arr3)
    {
       int m=removeDuplicatesFromSortedArray(arr1);
       int n=removeDuplicatesFromSortedArray(arr2);
       int o=removeDuplicatesFromSortedArray(arr3);
        
       HashMap<Integer,Integer>hm=new HashMap<>();
       for(int i=0;i<m;i++)
         if(hm.containsKey(arr1[i]))
            hm.put(arr1[i],hm.get(arr1[i])+1);
         else
            hm.put(arr1[i],1);
        
        
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr2[i]))
            hm.put(arr2[i],hm.get(arr2[i])+1);
         else
            hm.put(arr2[i],1);
        
        
       for(int i=0;i<o;i++)
         if(hm.containsKey(arr3[i]))
            hm.put(arr3[i],hm.get(arr3[i])+1);
         else
            hm.put(arr3[i],1);    
       
       String str="";
       int minLen=minimum(m,n,o);
       
       if(minLen==m)
       {
          for(int i=0;i<m;i++)
            if(hm.get(arr1[i])==3)
	        str+=arr1[i]+","; 
       }
       else if(minLen==n)
       {
          for(int i=0;i<n;i++)
            if(hm.get(arr2[i])==3)
	        str+=arr2[i]+","; 
       }
       else
       {
          for(int i=0;i<o;i++)
            if(hm.get(arr3[i])==3)
	        str+=arr3[i]+","; 
       }
       
       String intersection="";
       int len=str.length();
       for(int i=0;i<(len-1);i++) //To remove the Extra Semicolon
          intersection+=str.charAt(i);
          
       return intersection;
    }
    
    public static int  removeDuplicatesFromSortedArray(int[] arr)
    {
       int n=arr.length,j=0;
       for(int i=0;i<(n-1);i++)
          if(arr[i]!=arr[i+1])
             arr[j++]=arr[i];
             
       arr[j++]=arr[n-1];
       
       return j;
    }
}


//Optimal Approach
import java.util.Scanner;
public class Main
{
     public static void main(String[] args) 
     {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       
       System.out.println("Enter the Size of the Array3");
       int o=sc.nextInt();
       if(m>0 && n>0 && o>0)
       {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
            int[] arr3=new int[o];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array3:\n",o);
           for(int i=0;i<o;i++)
              arr3[i]=sc.nextInt();
           
            System.out.print("Intersection of both the Arrays is: ["+intersectionOfThreeSortedArrayContainingDuplicates(arr1,arr2,arr3)+"]");  
             
       }
       else
         System.out.println("Invalid Choice");          
     }
	
	
    public static String intersectionOfThreeSortedArrayContainingDuplicates(int[] arr1,int[] arr2,int[] arr3)
    {
        int i=0,j=0,k=0,prev1=Integer.MIN_VALUE,prev2=Integer.MIN_VALUE,prev3=Integer.MIN_VALUE,m=arr1.length,n=arr2.length,o=arr3.length;
	String temp="";
	    
        while(i<m && j<n && k<o)
        {
             while(i<m && prev1==arr1[i])
                i++;
          
             while(j<n && prev2==arr2[j])
                j++;
            
             while(k<o && prev3==arr3[k])
                k++;
          
             if(i<m && j<n && k<o)
             {
                if(arr1[i]==arr2[j] && arr2[j]==arr3[k])
                {
                  temp=temp+arr1[i]+",";
                  prev1=arr1[i++];
                  prev2=arr2[j++];
                  prev3=arr3[k++];
                }
                else
                {
                    int min=minimum(arr1[i],arr2[j],arr3[k]);
                    if(min==arr1[i])
                      prev1=arr1[i++];
                    else if(min==arr2[j])
                      prev2=arr2[j++];
                    else if(min==arr3[k])
                      prev3=arr3[k++];
                }
             }
        }
        
        String intersection="";
        int len=temp.length();
        for(int idx=0;idx<(len-1);idx++)
          intersection+=temp.charAt(idx);
	     
        return intersection;
    }
    
    public static int minimum(int a,int b,int c)
    {
        int temp=Math.min(a,b);
        int min=Math.min(temp,c);
        return min;
    }
}
