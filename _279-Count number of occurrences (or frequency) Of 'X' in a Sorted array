//Intuitive  Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array in Sorted Order\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     System.out.printf("Enter Target element\n");
	     int key=sc.nextInt();
	     
	     System.out.printf("Frequency/Count of %d is :%d\n",key,countOccurrences(arr,key));
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static int countOccurrences(int [] arr,int key)
	{
           int index=binarySearch(arr,key);
           if(index==-1)
             return 0;
        
           int firstIndex=index-1;
           while(firstIndex>=0 && arr[firstIndex]==key)
             firstIndex--;
           firstIndex++; 
       
           int lastIndex=index+1;
           while(lastIndex<arr.length &&arr[lastIndex]==key)
             lastIndex++;
            lastIndex--; 
      
           int count=lastIndex-firstIndex+1;
           return count;
	}
	
   public static int binarySearch(int[]arr,int key)
   {
      int low=0,high=arr.length-1,mid;
      while(low<=high)
      {
          mid=(low+high)/2;
          if(arr[mid]==key)
              return mid;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return -1;//key doesnot exists
   }
}

//Better Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {	
           Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array in Sorted Order\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     System.out.printf("Enter Target element\n");
	     int key=sc.nextInt();
	     
	     System.out.printf("Frequency/Count of %d is :%d\n",key,countOccurrences(arr,key));
	   }
	   else
	     System.out.println("Invalid Choice");   
    }
		
		
    public static int countOccurrences(int arr[],int key)
    {
       int n=arr.length;
       HashMap<Integer,Integer>hm=new HashMap<>();
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1); 
         else
           hm.put(arr[i],1);
       
       if(hm.containsKey(key))
         return hm.get(key);
       else
         return 0;
    }
    
}


//Optimal Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array in Sorted Order\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     System.out.printf("Enter Target element\n");
	     int key=sc.nextInt();
	     
	     System.out.printf("Frequency/Count of %d is :%d\n",key,countOccurrences(arr,key));
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static int countOccurrences(int [] arr,int key)
	{
           int first=firstIndex(arr,key);
           if(first==-1)
             return 0;
           int last=lastIndex(arr,key);
           int count=last-first+1;
           return count;
	}
	
   public static int firstIndex(int[]arr,int key)
   {
      int low=0,high=arr.length-1,first=-1,mid;
      while(low<=high)
      {
          mid=(low+high)/2;
          if(arr[mid]==key)
          {
             first=mid;
             high=mid-1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return first;
   }
   
   
   public static int lastIndex(int[]arr,int key)
   {
      int low=0,high=arr.length-1,last=-1,mid;
      while(low<=high)
      {
          mid=(low+high)/2;
          if(arr[mid]==key)
          {
             last=mid;
             low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return last;
   }
}
