import java.util.Scanner;
import java.lang.Math;
import java.math.BigInteger;
public class Main
{
	public static void main(String[] args) 
	{
	    Scanner sc=new Scanner(System.in);
	    int n=sc.nextInt();
	    boolean res=automorphic1(n);
	    if(res==true)
		  System.out.println("is Automorphic");
		else
		  System.out.println("is not Automorphic");
		  
        res=automorphic2(n);
	    if(res==true)
		  System.out.println("is Automorphic");
		else
		  System.out.println("is not Automorphic");
	}
	
	//Bruteforce
	public static boolean automorphic1(int num)
	{
	    int temp=(num*num)%(int)Math.pow(10,countDigits(num));
	    if(temp==num)
	      return true;
	    else
	      return false;
	}
	
	//optimal(using BigInteger Class)
	public static boolean automorphic2(int num)
	{
	    BigInteger NUM=BigInteger.valueOf(num);
	    BigInteger sqr=NUM.multiply(NUM);//we used Big Integer class to avoid Integer overflow coz Square of a number is huge
	    BigInteger temp=BigInteger.valueOf((int)Math.pow(10,countDigits(num)));
	    BigInteger res=sqr.remainder(temp); 
	    int result=res.compareTo(NUM);
	    if(result==0)
	      return true;
	    else
	      return false;
	}
	public static int countDigits(int num)
	{
	    if(num<10)
	      return 1;
        return (1+countDigits(num/10));
	}
}
