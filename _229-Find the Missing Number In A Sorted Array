//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
  {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	    System.out.println("Missing Number is: "+missingNumberInSortedArray(arr));
	}
	
	public static int missingNumberInSortedArray(int[] arr)
	{
	    int i;
       for(i=0;i<n;i++)
         if(arr[i]!=(i+1))
            break;
       return i+1;        
	}
}

//Optimal Approach

import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	    System.out.println("Missing Number is: "+missingNumberInSortedArray(arr));
	}
	
	public static int missingNumberInSortedArray(int[] arr)
	{
        return modifiedBinarySearch(arr);      
	}
	
	public static int modifiedBinarySearch(int[]arr)
   {
      int low=0;
      int high=arr.length-1;
      int res=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]!=(mid+1) && arr[mid-1]==mid)
          {
              res=(mid+1);
              break;
          }
          else if(arr[mid]!=(mid+1) && arr[mid-1]!=mid)
            high=mid-1;
          else if(arr[mid]==(mid+1))
            low=mid+1;
      }
      return res;
   }
}

