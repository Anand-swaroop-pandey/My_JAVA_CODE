//Intuitive  Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array in Sorted Order\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     System.out.printf("Enter Target element\n");
	     int key=sc.nextInt();
	     findFirstAndLast(arr,key);
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static void findFirstAndLast(int [] arr,int key)
	{
           int index=binarySearch(arr,key);
           if(index==-1)
           {
               System.out.printf("%d is not Present in the Array",key);
               return;
           }
           else
           {
                 int firstIndex=index-1;
                 while(firstIndex>=0 && arr[firstIndex]==key)
                   firstIndex--;
                 firstIndex++; 
       
                 int lastIndex=index+1;
                 while(lastIndex<arr.length &&arr[lastIndex]==key)
                   lastIndex++;
                 lastIndex--; 
      
                 System.out.printf("First Occurence of %d is at index : %d\n",key,firstIndex);
                 System.out.printf("Last Occurence of %d is at index : %d",key,lastIndex);
           }
         
	}
	
        public static int binarySearch(int[]arr,int key)
        {
          int low=0,high=arr.length-1;
          while(low<=high)
          {
            int mid=(low+high)/2;
            if(arr[mid]==key)
              return mid;
            else if(key<arr[mid])
              high=mid-1;
            else if(key>arr[mid])
              low=mid+1;
          }
          return -1;//key doesnot exists
        }
}


//Optimal Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array in Sorted Order\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     System.out.printf("Enter Target element\n");
	     int key=sc.nextInt();
	     findFirstAndLast(arr,key);
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static void findFirstAndLast(int [] arr,int key)
	{
           int first=firstIndex(arr,key);
           if(first==-1)
           {
             System.out.printf("%d is not Present in the Array",key);
             return;
           }
           int last=lastIndex(arr,key);
      
          System.out.printf("First Occurence of %d is at index : %d\n",key,first);
          System.out.printf("Last Occurence of %d is at index : %d",key,last);
        }
	
	
        public static int firstIndex(int[]arr,int key)
        {
          int low=0,high=arr.length-1,first=-1,mid;
          while(low<=high)
          {
              mid=(low+high)/2;
             if(arr[mid]==key)
             {
               first=mid;
               high=mid-1;
             }
             else if(key<arr[mid])
               high=mid-1;
             else if(key>arr[mid])
               low=mid+1;
          }
          return first;
        }
   
   
        public static int lastIndex(int[]arr,int key)
        {
          int low=0,high=arr.length-1,last=-1,mid;
          while(low<=high)
          {
            mid=(low+high)/2;
            if(arr[mid]==key)
            {
              last=mid;
              low=mid+1;
            }
            else if(key<arr[mid])
              high=mid-1;
            else if(key>arr[mid])
              low=mid+1;
          }
          return last;
        }
}
