//Bruteforce Approach
import java.util.*;
public class Test
{
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array :");
       int n=sc.nextInt();
       if(n<1)
       {
         System.out.println("Invalid Choice");
         return;
       }
  
       int[] arr=new int[n];
       System.out.println("Enter "+n+" Elements of the Array");
       for(int i=0;i<n;i++)
         arr[i]=sc.nextInt();
         
       System.out.println("Enter TargetSum :");
       int targetSum=sc.nextInt();
      
       System.out.println("Distinct quadruplets that Sums to "+targetSum+" are :");
       System.out.println(fourSum(arr,targetSum));
     }
	
    public static List<List<Integer>> fourSum(int[]arr,int target)
    {
       List<List<Integer>>ll=new ArrayList<>();
        
       int n=arr.length;
       
       if (n<4)
         return ll;
    
       Arrays.sort(arr);
        
       Set<List<Integer>>hs= new HashSet<>();
        
       for(int i=0;i<(n-3);i++)
          threeSum(arr,i+1,(target-arr[i]),hs); 

       for(List<Integer>l :hs)
         ll.add(l);
        
      return ll;
    }
   
             
   public static void threeSum(int[]arr,int lb,int target,Set<List<Integer>>hs)
   {
     int n=arr.length,remTarget,j,k;
     for(int i=lb;i<n-2;i++)
     {         
        remTarget=(target-arr[i]);
        j=i+1;
        k=n-1;
        
        while(j<k) 
        {
            if((arr[j]+arr[k])==remTarget)
            {
                List<Integer>quadruplets=new ArrayList<>(4);
                
                quadruplets.add(arr[lb-1]);
                quadruplets.add(arr[i]);
                quadruplets.add(arr[j]);
                quadruplets.add(arr[k]);
                
                hs.add(quadruplets);
                
                j++;
                k--;
                
            } 
            else if((arr[j]+arr[k])>remTarget)
               k--;
            else
               j++;
        }
     }
   } 
}


//Optimal Approach

import java.util.*;
public class Test
{
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array :");
       int n=sc.nextInt();
       if(n<1)
       {
         System.out.println("Invalid Choice");
         return;
       }
  
       int[] arr=new int[n];
       System.out.println("Enter "+n+" Elements of the Array");
       for(int i=0;i<n;i++)
         arr[i]=sc.nextInt();
         
       System.out.println("Enter TargetSum :");
       int targetSum=sc.nextInt();
      
       System.out.println("Distinct quadruplets that Sums to "+targetSum+" are :");
       System.out.println(fourSum(arr,targetSum));
    }
	
    public static List<List<Integer>> fourSum(int[]arr,int target)
    {
       List<List<Integer>>ll=new ArrayList<>();
        
       int n=arr.length;
       
       if (n<4)
         return ll;
    
       Arrays.sort(arr);
        
       for(int i=0;i<(n-3);i++)
       {
          if(i > 0 && (arr[i-1]==arr[i]))
             continue;   
          threeSum(arr,i+1,(target-arr[i]),ll); 
       }
        
       return ll;
    }
   
             
   public static void threeSum(int[]arr,int lb,int target,List<List<Integer>>ll)
   {
     int n=arr.length,remTarget,j,k;
     for(int i=lb;i<n-2;i++)
     { 
        if(i>lb && (arr[i]==arr[i-1]))//To Avoid Duplicates
          continue;
         
        remTarget=(target-arr[i]);
        j=i+1;
        k=n-1;
        
        while(j<k) 
        {
            if((arr[j]+arr[k])==remTarget)
            {
                List<Integer>quadruplets=new ArrayList<>(4);
                
                quadruplets.add(arr[lb-1]);
                quadruplets.add(arr[i]);
                quadruplets.add(arr[j]);
                quadruplets.add(arr[k]);
                
                ll.add(quadruplets);
                
                j++;
                k--;
                
                while(j<k && arr[j]==arr[j-1]) //To Avoid Duplicates
                  j++;
                
                while(j<k && arr[k]==arr[k+1]) //To Avoid Duplicates
                  k--;
                
            } 
            else if((arr[j]+arr[k])>remTarget)
               k--;
            else
               j++;
        }
     }
   } 
}
