//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     printFrequency(arr);
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static void printFrequency(int [] arr)
	{
	  int size=(arr.length+1);
          int[] freqArr=new int[size];
          for(int i=0;i<arr.length;i++)
            freqArr[arr[i]]++;
          System.out.println("Frequency Of Elements are:");  
          for(int i=1;i<size;i++)
            System.out.println(i+"=>"+freqArr[i]);  
	}
}

//Better Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {	
       Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>1)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     printDuplicate(arr);
	   }
	   else
	     System.out.println("Invalid Choice/No Duplicate");   
    }
		
    public static void printDuplicate(int arr[])
    {
       int n=arr.length;
       HashMap<Integer,Integer>hm=new HashMap<>();
 
       for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1);
       
       System.out.println("Frequency Of Elements are:");
       for(int i=1;i<=n;i++)
         if(hm.containsKey(i))
           System.out.println(i+"=>"+hm.get(i));
         else
           System.out.println(i+"=>"+"0");
    }
}


//Even Better Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {	
       Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>1)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     printDuplicate(arr);
	   }
	   else
	     System.out.println("Invalid Choice/No Duplicate");   
    }
		
    public static void printDuplicate(int arr[])
    {
       int n=arr.length;
       TreeMap<Integer,Integer>tm=new TreeMap<>();
 
       for(int i=1;i<=n;i++)
         tm.put(i,0);
         
       for(int i=0;i<n;i++)
         if(tm.containsKey(arr[i]))
           tm.put(arr[i],tm.get(arr[i])+1);

       System.out.println("Frequency Of Elements are:");
       for(int key:tm.keySet())
         System.out.println(key+"=>"+tm.get(key));
    }
}


//Optimal Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     printFrequency(arr);
	   }
	   else
	     System.out.println("Invalid Choice");
	}
	
	public static void printFrequency(int [] arr)
	{
	    int n=arr.length;
	    for(int i=0;i<n;i++)
	      arr[i]=arr[i]-1;
	      
	    for(int i=0;i<n;i++)
	    {
	        int OrgValAt_ithIndex=arr[i]%n;
	        arr[OrgValAt_ithIndex]+=n;
	    }
      
	    System.out.println("Frequency Of Elements are:");
	    for(int i=0;i<n;i++)
	    {
	       int countOf_i=(arr[i]/n);
	       System.out.println((i+1)+"=>"+countOf_i);
	    }
	}
}


//Optimal Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	   Scanner sc=new Scanner(System.in);
	   System.out.println("Enter the size of the array");
	   int n=sc.nextInt();
	   if(n>0)
	   {
	     int[] arr=new int[n];
	     System.out.printf("Enter %d elements of the array\n",n);
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
	     printFrequency(arr);
	   }
	   else
	     System.out.println("Invalid Choice");
	     int arr[] = {2, 3, 3, 2, 5};
	     printFrequency(arr);
	}
	
	public static void printFrequency(int [] arr)
	{
	    int n=arr.length;
	      // Traverse all array elements
        int i = 0;
        while (i < n)
        {
            // If this element is already processed,
            // then nothing to do
            if (arr[i] <= 0)
            {
                i++;
                continue;
            }
 
            // Find index corresponding to this element
            // For example, index for 5 is 4
            int elementIndex = arr[i] - 1;
 
            // If the elementIndex has an element that is not
            // processed yet, then first store that element
            // to arr[i] so that we don't lose anything.
            if (arr[elementIndex] > 0)
            {
                arr[i] = arr[elementIndex];
 
                // After storing arr[elementIndex], change it
                // to store initial count of 'arr[i]'
                arr[elementIndex] = -1;
            }
            else
            {
                // If this is NOT first occurrence of arr[i],
                // then decrement its count.
                arr[elementIndex]--;
 
                // And initialize arr[i] as 0 means the element
                // 'i+1' is not seen so far
                arr[i] = 0;
                i++;
            }
        }
 
        System.out.println("Below are counts of all elements");
        for (int j = 0; j < n; j++)
            System.out.println(j+1 + "=>" + Math.abs(arr[j]));
	}
}
