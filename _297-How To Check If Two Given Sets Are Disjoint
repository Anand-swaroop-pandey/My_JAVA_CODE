//Bruteforce Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
         if(m>0 && n>0)
         {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           boolean res=areDisjoint(arr1,m,arr2,n);
           if(res==false)
              System.out.print("Not Disjoint");  
           else
              System.out.print("Yes, Disjoint"); 
         }
         else
            System.out.println("Invalid Choice");
	}
	
	public static boolean areDisjoint(int[] arr1,int m,int[] arr2,int n)
	{
           for(int i=0;i<m;i++) 
             if(linearSearch(arr1[i],arr2,n))
               return false;
           return true;
	}
	
	public static boolean linearSearch(int key,int[] arr,int n)
	{
           for(int i=0;i<n;i++) 
              if(arr[i]==key)
                return true;
           return false;
	}
}

//Improved Approach
import java.util.*;
public class Test
{
    public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       if(m>0 && n>0)
         {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           boolean res=areDisjoint(arr1,m,arr2,n);
           if(res==false)
              System.out.print("Not Disjoint");  
           else
              System.out.print("Yes, Disjoint"); 
        }
        else
            System.out.println("Invalid Choice");
     }
	
   public static boolean areDisjoint(int[] arr1,int m,int[] arr2,int n)
   {
        Arrays.sort(arr2);
        for(int i=0;i<m;i++) 
          if(binarySearch(arr1[i],arr2,n))
             return false;
        return true;
   }
	
   public static boolean binarySearch(int key,int[]arr,int n)
   {
      int low=0;
      int high=n-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
            return true;
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return false;//key doesnot exists
   }
}

//Better Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {	
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
         if(m>0 && n>0)
         {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           boolean res=areDisjoint(arr1,m,arr2,n);
           if(res==false)
              System.out.print("Not Disjoint");  
           else
              System.out.print("Yes, Disjoint"); 
         }
         else
            System.out.println("Invalid Choice");
    }
		
    public static boolean areDisjoint(int[] arr1,int m,int[] arr2,int n)
    {
       HashSet<Integer>hs=new HashSet<>();
       for(int i=0;i<m;i++)
         hs.add(arr1[i]);
           
       for(int i=0;i<n;i++)
         if(hs.contains(arr2[i]))
           return false;
           
        return true;
    }
}


//Optimal Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter the Size of the Array1");
       int m=sc.nextInt();
       
       System.out.println("Enter the Size of the Array2");
       int n=sc.nextInt();
       if(m>0 && n>0)
       {
            int[] arr1=new int[m];
            int[] arr2=new int[n];
           System.out.printf("Enter %d Elements of Array1:\n",m);
           for(int i=0;i<m;i++)
              arr1[i]=sc.nextInt();
              
           System.out.printf("Enter %d Elements of Array2:\n",n);
           for(int i=0;i<n;i++)
              arr2[i]=sc.nextInt();
              
           boolean res=areDisjoint(arr1,m,arr2,n);
           if(res==false)
              System.out.print("Not Disjoint");  
           else
              System.out.print("Yes, Disjoint"); 
       }
       else
          System.out.println("Invalid Choice");
    }
	
    public static boolean areDisjoint(int[] arr1,int m,int[] arr2,int n)
    {
       Arrays.sort(arr1);
       Arrays.sort(arr2);
       return intersectionOfTwoSortedArray(arr1,m,arr2,n);
    }
	
    public static boolean intersectionOfTwoSortedArray(int[] arr1,int m,int[] arr2,int n)
    {
	int i=0,j=0;
        while(i<m && j<n)
          if(arr1[i]==arr2[j])
            return false;
          else
          {
              int min=arr1[i]<arr2[j]?arr1[i]:arr2[j];
              if(min==arr1[i])
                i++;
              else if(min==arr2[j])
                j++;
          }
        return true;
    }
}
