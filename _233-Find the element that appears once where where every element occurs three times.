//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
        System.out.println("Element occurring once is: "+findSingle(arr));
	}
	
	public static int findSingle(int arr[])
	{
	    int count;
	    int res=-1;
	    for(int i=0;i<arr.length;i++)
	    {
	        count=0;
	        for(int j=0;j<arr.length;j++)
	            if(arr[i]==arr[j])
	            {
	              count++;
	              if(count>1)
	                break;
	            }
	              
	        if(count==1)
	        {
	            res=arr[i];
	            break;
	        }
	    }
	    return res;
	}
}


//Improved Approach 
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
        System.out.println("Element occurring once is: "+findSingle(arr));
	}
	
	public static int findSingle(int arr[])
	{
	    int res=-1;
	    int[] freqArr=new int[arr.length];
	    countFrequency(arr,freqArr);
	    for(int i=0;i<arr.length;i++)
	       if(freqArr[i]==1)
	       {
	           res=arr[i];
	           break;
	       } 
	     return res;
	}
	public static void countFrequency(int[] arr,int[] freqArr)
	{
	         int n=arr.length;
	         int count;   
           for(int i=0;i<n;i++)
           {
             if(freqArr[i]==-1)
               continue;
             count=1;
             for(int j=i+1;j<n;j++)
                if(arr[i]==arr[j])
                {
                   freqArr[j]=-1;
                   count++;
                }
            freqArr[i]=count; 
           }
	}
}



//Good Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
        System.out.println("Element occurring once is: "+findSingle(arr));
	}
	
   public static int findSingle(int arr[])
   {
       int sum=0,arrSum=0;
	    int[] freqArr=new int[arr.length];
	    countFrequency(arr,freqArr);
	    for(int i=0;i<arr.length;i++)
	    {
	        if(freqArr[i]!=-1)
              sum+=arr[i];
            arrSum+=arr[i];  
	    }
        int missing=((3*sum)-arrSum)/2;
        return missing;
	}
	public static void countFrequency(int[] arr,int[] freqArr)
	{
	       int n=arr.length;
	       int count;   
           for(int i=0;i<n;i++)
           {
             if(freqArr[i]==-1)
               continue;
             count=1;
             for(int j=i+1;j<n;j++)
                if(arr[i]==arr[j])
                {
                   freqArr[j]=-1;
                   count++;
                }
            freqArr[i]=count; 
           }
	}
}

//Better Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	     System.out.printf("Enter %d Elements\n",n);
	    for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
        System.out.println("Element occurring once is: "+findSingle(arr));
	}
	
   public static int findSingle(int[] arr)
	{
	   Arrays.sort(arr);
	   int res=-1;
	   int n=arr.length;
	   for(int i=0;i<n;i++)
	   {   
	        if(i==(n-1))
	         {
	             res=arr[i];
	             break;
	         }
	         else if(arr[i]!=arr[i+1])
	         {
	             res=arr[i];
	             break;
	         }
	       
	       while(i<(n-1) && arr[i]==arr[i+1])
	         i++;
	   }
	   return res;   
	}
}



