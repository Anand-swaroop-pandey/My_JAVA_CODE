//Bruteforce Approach(Sort in Ascending Order using inbuilt Arrays.sort() function using any Sorting Algorithm and return Kth Element From the Last)
import java.util.*;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
           int[] arr=new int[n];
             
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
                arr[i]=sc.nextInt();
                
           System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
                  System.out.println(arr[i]);
                 
            System.out.println("Entered K:");
            int k=sc.nextInt();
            if(k>0 && k<=n)
            {
                Arrays.sort(arr);
                 System.out.printf("%d rd/th Largest Element is %d",k,arr[n-k]);
            }
            else
              System.out.println("Invalid Choice");      
       }
       else
           System.out.println("Invalid Choice");   
   }
}


//Bruteforce Approach(Sort in Descending Order till (k-1)th Index and return arr[k-1]) (Idea : https://youtu.be/x3HDo6H90Y0)
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
           int[] arr=new int[n];
             
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
                arr[i]=sc.nextInt();
                
           System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
                  System.out.println(arr[i]);
                 
           System.out.println("Entered K:");
           int k=sc.nextInt();
           if(k>0 && k<=n)
              System.out.printf("%d rd/th Largest Element is %d",k,descendingSort(arr,k));
       }
       else
          System.out.println("Invalid Choice");
   }
   
   
   public static int descendingSort(int[]arr,int k)
   {
      int n=arr.length;
      for(int i=0;i<n;i++)
      {
          for(int j=i+1;j<n;j++)
            if(arr[i]<arr[j])
            {
                //Swapping
                int temp=arr[i];
                arr[i]=arr[j];
                arr[j]=temp;
            } 
            if(i==(k-1))
              break;
      }
      return arr[k-1];          
   }
}


//Good Approach (Idea : https://youtu.be/o4bAoo_gFBU)
import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
           int[] arr=new int[n];
             
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
                arr[i]=sc.nextInt();
                
           System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
                  System.out.println(arr[i]);
                 
            System.out.println("Enter K:");
            int k=sc.nextInt();
            if(k>0 && k<=n)
               System.out.printf("%d rd/th Largest Element is %d",k,modifiedOptimisedBubbleSort(arr,k));
       }
       else
          System.out.println("Invalid Choice");
   }

   public static int modifiedOptimisedBubbleSort(int[]arr,int k)
   {
      int n=arr.length;
      for(int pass=1;pass<=k;pass++)
      {
            boolean swap=false;
            for(int j=0;j<(n-pass);j++)
            if(arr[j]>arr[j+1])
              {
                 swap=true;
                 //Swapping
                 int temp=arr[j];
                 arr[j]=arr[j+1];
                 arr[j+1]=temp;
              }
              
           if(swap==false)
             break;
      }
      return arr[n-k];//Kth element from Last i.e Kth largest element in the Array
   }
}

//Better Approach (Idea : https://youtu.be/fnbImb8lo88)

import java.util.Scanner;
public class Test
{
   public static void main(String[] args)
   {
       Scanner sc=new Scanner(System.in);
       System.out.println("Enter Size of the Array");
       int n=sc.nextInt();
       if(n>0)
       {
           int[] arr=new int[n];
             
           System.out.printf("Enter %d Elements:\n",n);
           for(int i=0;i<n;i++)
                arr[i]=sc.nextInt();
                
           System.out.println("Entered Elements are:");
            for(int i=0;i<n;i++)
                  System.out.println(arr[i]);
                 
            System.out.println("Enter K:");
            int k=sc.nextInt();
            if(k>0 && k<=n)
               System.out.printf("%d rd/th Largest Element is %d",k,quickSelect(arr,0,n-1,n,k));
       }
       else
          System.out.println("Invalid Choice");
   }

    public static int quickSelect(int[]arr,int lb,int ub,int n,int k)
   {
      if(lb<ub)
      {
          int index=partition(arr,lb,ub);
          if((n-k)==index)
            return arr[n-k];
          else if((n-k)<index)
            return quickSelect(arr,lb,index-1,n,k);
          else
            return quickSelect(arr,index+1,ub,n,k);
      }
      //if(lb==ub)
      return arr[lb]; //return arr[ub];
   }
   
   
   public static int partition(int[] arr,int lb,int ub)
   {
     int i=lb,j=ub,pivot=arr[lb],n=arr.length;
     
     while(true)
     {
        while(i<n && arr[i]<=pivot )
          i++;
          
        while(j>=0 && arr[j]>pivot)
          j--;
          
        if(i<j) //Swap arr[i] and arr[j]
          swap(arr,i,j);
        else //if i>j => Swap Pivot(arr[lb]) and arr[j]
        {
          swap(arr,lb,j);
          break;
        }
     }
     
     return j;  //index of pivot element    
   }
   
    
   public static void swap(int[]arr,int i,int j)
   {
       int temp=arr[i];
       arr[i]=arr[j];
       arr[j]=temp;
   }
}

//****(Other Approaches to be Discussed Soon)
>Using Max-Heap
>Using Min-Heap
