//Method 1
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
  	  if(n<1)
  	  {
  	     System.out.println("Invalid Choice");
	     return;
 	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
 	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
           List<Integer>al=new ArrayList<>();
           int n=arr.length;
           for(int i=0;i<n;i++)
             for(int j=i+1;j<n;j++)
               if(arr[i]==arr[j])
                 al.add(arr[i]);
            
           return al;
        }
}

//Method 2

import java.util.*;
public class Test
{
         public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
  	  if(n<1)
  	  {
  	     System.out.println("Invalid Choice");
	     return;
 	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
 	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          HashMap<Integer,Integer>hm=new HashMap<>();
          int n=arr.length;
        
          for(int i=0;i<n;i++)
           if(hm.containsKey(arr[i]))
            hm.put(arr[i],hm.get(arr[i])+1);
           else
            hm.put(arr[i],1);
        
          for(int key:hm.keySet())
            if(hm.get(key)==2)
              al.add(key);
        
          return al;
        }
}

//Method 3

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
  	  if(n<1)
 	  {
	    System.out.println("Invalid Choice");
 	    return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
         List<Integer>al=new ArrayList<>();
         int n=arr.length;
         int[] count=new int[n];
      
         for(int i=0;i<n;i++)
           count[arr[i]-1]++;
      
         for(int i=0;i<n;i++)
           if(count[i]==2)
             al.add(i+1);
             
         return al;
        }
}

//Method 4

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
  	  int n=sc.nextInt();
	  if(n<1)
 	  {
 	    System.out.println("Invalid Choice");
 	    return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          HashSet<Integer>hs=new HashSet<>();
          int n=arr.length;
        
          for(int i=0;i<n;i++)
            if(hs.contains(arr[i]))
               al.add(arr[i]);
            else
               hs.add(arr[i]);
        
         return al;
        }
}


//Method 5

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
 	  if(n<1)
	  {
   	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
  	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          int n=arr.length;
          int[] count=new int[n];
      
          for(int i=0;i<n;i++)
          {
             if(count[arr[i]-1]==1)
               al.add(arr[i]);
           
             count[arr[i]-1]++;  
          }
        
          return res;
        }
}

//Method 6

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
  	  int n=sc.nextInt();
	  if(n<1)
 	  {
	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
  	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	   System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          Arrays.sort(arr);
          int n=arr.length;
      
          for(int i=0;i<n-1;i++)
            if(arr[i]==arr[i+1])
            {
              al.add(arr[i]);
              i++;
            }     

          return al;
        }
}

//Method 7

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
  	     System.out.println("Invalid Choice");
	     return;
   	  }
 	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          Arrays.sort(arr);
          int n=arr.length;

          for(int i=0;i<n-1;i++)
            if(arr[i]!=arr[i+1] && areFirstAndLastIndexEqual(arr,arr[i])==false)
               al.add(arr[i]);
        
          if(n>1 && arr[n-1]==arr[n-2])
            al.add(arr[n-1]);
        
          return al;
        }
    
    public static boolean areFirstAndLastIndexEqual(int [] arr,int key)
    {
        int first=firstIndex(arr,key);
        int last=lastIndex(arr,key);
        if(first!=last)
          return false;
        else
          return true;
    }
	
	
   public static int firstIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int first=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             first=mid;
             high=mid-1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return first;
   }
   
   
   public static int lastIndex(int[]arr,int key)
   {
      int low=0;
      int high=arr.length-1;
      int last=-1;
      while(low<=high)
      {
          int mid=(low+high)/2;
          if(arr[mid]==key)
          {
             last=mid;
             low=mid+1;
          }
          else if(key<arr[mid])
            high=mid-1;
          else if(key>arr[mid])
            low=mid+1;
      }
      return last;
   }
}


//Method 8

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
	     System.out.println("Invalid Choice");
    	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	    arr[i]=sc.nextInt();
		
	  System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          List<Integer>al=new ArrayList<>();
          int n=arr.length;
          boolean[] visited=new boolean[n];
      
          for(int i=0;i<n;i++)
          {
             int ele=arr[i];
             int idx=ele-1;
             if(visited[idx]==true)
               al.add(ele);
           
             visited[idx]=true;
          }
      
         return al;
        }
}

//Method 9

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
  	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
		
	   System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
           List<Integer>al=new ArrayList<>();
           int n=arr.length;
           for(int i=0;i<n;i++)
           {
               int ele=Math.abs(arr[i]);
               int idx=ele-1;
	 
               if(arr[idx]<0)
                 al.add(ele);
           
	      arr[idx]*=-1;
           }
      
          return al;
        }
}

//Method 10
//Cycle Sort
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
 	    System.out.println("Invalid Choice");
	    return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
		
	   System.out.println("Repeating Elements are :"+findDuplicates(arr));
	}
	
	public static List<Integer> findDuplicates(int[]arr)
        {
          int n=arr.length,i=0;
          while(i<n)
          {
             int correctIndex=arr[i]-1;
             if(arr[correctIndex]==arr[i])
	          i++;
	     else //if arr[i] is not at its correct index
             {
               int temp=arr[correctIndex];
               arr[correctIndex]=arr[i];
               arr[i]=temp;
             }      
           }  
        
           List<Integer>al=new ArrayList<>();
           for (i=0; i<n; i++) 
             if(arr[i]!=i+1)
                al.add(arr[i]);
             
	    return al;
        }
}
