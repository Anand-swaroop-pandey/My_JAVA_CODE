//Bruteforce Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int arr[])
	{
	    int n=arr.length;
	    for(int i=0;i<(n-2);i+=2)
	        if(arr[i]!=arr[i+1])
	            return arr[i];
	            
	    return arr[n-1];
	}
}


//Improved  Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int arr[])
	{
	    int res=-1,n=arr.length;
	    int[] freqArr=new int[n];
	    countFrequency(arr,freqArr);
	    for(int i=0;i<n;i++)
	       if(freqArr[i]==1)
	       {
	           res=arr[i];
	           break;
	       }
	       
	     return res;
	}
	
	public static void countFrequency(int[] arr,int[] freqArr)
	{
          int n=arr.length;   
          for(int i=0;i<n;i++)
          {
            if(freqArr[i]==-1)
               continue;
	       
            int count=1;
            for(int j=i+1;j<n;j++)
              if(arr[i]==arr[j])
              {
                 freqArr[j]=-1;
                 count++;
              }
		
            freqArr[i]=count; 
          }
	}
}


//Better Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int arr[])
	{
          int n=arr.length,res=-1;
          HashMap<Integer,Integer>hm=new HashMap<>(n);
       
          for(int i=0;i<n;i++)
            if(hm.containsKey(arr[i]))
              hm.put(arr[i],hm.get(arr[i])+1);
            else
              hm.put(arr[i],1);
       
          for(int i=0;i<n;i++)
            if(hm.get(arr[i])==1)
            {
              res=arr[i];
              break;
            }
             
          return res; 
	}
}

//Good Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int arr[])
	{
           int n=arr.length,res=-1,arrSum=0,UniqueSum=0;
           HashSet<Integer>hs=new HashSet<>(n);
           for(int i=0;i<n;i++)
           {
             hs.add(arr[i]);
             arrSum+=arr[i];
           }
         
           for(int val: hs)
             UniqueSum+=val; 
        
           res=(2*UniqueSum)-arrSum;
           return res;
	}
}


//Optimised Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int arr[])
	{
           int res=0,int n=arr.length;
	   for(int i=0;i<n;i++)
	     res=res^arr[i];
	     
	   return res;
	}
}



//Optimal Approach
/*
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search without recursion.
All elements before the required have the first occurrence at even index (0, 2, ..and so on) and the next occurrence at odd index (1, 3, ..and so on). 
*/

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    if(n>0)
	    {
	      int[] arr=new int[n];
	      System.out.printf("Enter %d Elements of the Array\n",n);
	      for(int i=0;i<n;i++)
	        arr[i]=sc.nextInt();
	        
	      System.out.println("Element occurring once is: "+findSingleInSorted(arr));
	    }
	    else
	      System.out.println("Invalid Choice");
	}
	
        public static int findSingleInSorted(int[] arr)
	{
	  int low=0,high=(arr.length-1),res=-1;
          while(low<=high)
          {
            if(low==high)
            {
                res=arr[low];
                break;
            }
            int mid=(low+high)/2;
            
            if((mid%2)==0)//Mid is even
            {
                if(arr[mid]==arr[mid+1])
                   low=mid+2;
                else//(arr[mid]!=arr[mid+1])
                   high=mid;
            }
            else//Mid is Odd
            {
                if(arr[mid]==arr[mid-1])
                   low=mid+1;
                else//(arr[mid]!=arr[mid-1])
                    high=mid-1;
            }
          }
          
          return res;
	}
}
