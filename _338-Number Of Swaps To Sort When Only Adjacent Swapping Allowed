import java.util.*;
public class Test
{
	public static void main(String[] args) {
	      Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
         if(n>0)
         {
            int[] arr=new int[n];
            System.out.printf("Enter %d Elements of Array:\n",n);
            for(int i=0;i<n;i++)
               arr[i]=sc.nextInt();
            
            System.out.println("Minimum Number Of Swaps Needed To Sort The Array In Ascending Order When Only Adjacent Swapping Allowed Are :"+countSwaps(arr,n));   
         }
         else
           System.out.println("Invalid Choice"); 
    }
    
    public static int countSwaps(int arr[], int n)
    {
        return count_Inversion(arr,n);
    }
    
    public static int count_Inversion(int arr[], int n)
    {
        int[] temp=new int[n];
        return mergeSort(arr,temp,0,(n-1));
    }
    
    public static int mergeSort(int[] arr,int[] temp,int lb,int ub)
    {
      int inv_count = 0;
      if(lb<ub)
      {
        int mid = (lb + ub)/2;
        inv_count+=mergeSort(arr,temp,lb,mid);
        inv_count+=mergeSort(arr,temp,mid+1,ub);
        inv_count+=merge(arr,temp,lb,mid,ub);
      }
      return inv_count;
    }
   
  public static int merge(int arr[],int temp[],int lb,int mid,int ub)
  {
    int inv_count=0;
    int i = lb,j = mid+1,k = lb;
    
    while((i <=mid) && (j <= ub))
        if(arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
        {
            temp[k++] = arr[j++];
            inv_count+=(mid-i+1);
        }

    while(i <=mid)
        temp[k++] = arr[i++];

    while(j <= ub)
        temp[k++] = arr[j++];

    for(i = lb ; i <= ub ; i++)
        arr[i] = temp[i];
    
    return inv_count;
  }
}

/*

This Problem is very similar to Find the number of reverse Pairs in an array (i<j => arr[i]>arr[j]) All these reverse pairs needed to be swapped in order to sort the array in 
Ascending order,and that count (number of reverse Pairs in an array)  will be the minimum number of adjacent swaps to sort the array in ascending order.

Example :

arr[]={2,20,15,6,10};

Reverse Pairs are :
(20,15)
(20,6)
(20,10)
(15,6)
(15,10)

Swap(20,15);
arr[]={2,15,20,6,10};

Swap(20,6);
arr[]={2,15,6,20,10};

Swap(20,10);
arr[]={2,15,6,10,20};

Swap(15,6);
arr[]={2,6,15,10,20};

Swap(15,10);
arr[]={2,6,10,15,20}; ==>Sorted Array(Ascending Order)

Note :
* A Sorted array (Ascending order) has no Reverse Pairs coz for every i<j => arr[i] < arr[j] so no inversions are Formed.
* A Sorted array (Descending order) has Maximum Reverse Pairs coz for every i<j => arr[i] > arr[j] so Maximum inversions are Formed.
*/
