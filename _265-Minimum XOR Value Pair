//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args)
  {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	    System.out.printf("Enter %d Elements:",n);
	    for(int i=0;i<n;i++)
	      arr[i]=sc.nextInt();
	    System.out.println("Minimum XOR value Pair is "+minXorValuePair(arr));
	}
	public static int minXorValuePair(int[] arr)
	{
	    int n=arr.length;
	    int min=Integer.MAX_VALUE;
	    for(int i=0;i<n;i++)
	      for(int j=i+1;j<n;j++)
	        if((arr[i]^arr[j])<min)
	           min=(arr[i]^arr[j]);
	    return min;        
	}
}


//Better Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	    Scanner sc=new Scanner(System.in);
	    System.out.println("Enter the Size of the Array");
	    int n=sc.nextInt();
	    int[] arr=new int[n];
	    System.out.printf("Enter %d Elements:",n);
	    for(int i=0;i<n;i++)
	      arr[i]=sc.nextInt();
	    System.out.println("Minimum XOR value Pair is "+minXorValuePair(arr));
	}
	public static int minXorValuePair(int[] arr)
	{
	    int n=arr.length;
	    Arrays.sort(arr);
	    int min=Integer.MAX_VALUE;
	    for(int i=0;i<(n-1);i++)
	        if((arr[i]^arr[i+1])<min)
	           min=(arr[i]^arr[i+1]);
	    return min;        
	}
}
/*
if you want Minimum XOR pair ,you want to choose two Numbers such that their Binary representation is very Close, so that Muntiplying the same bits would give us 0.
coz of XOR property,so we sort and look for consecutive pairs
*/

//Optimal Approach (Using Trie)
(To be Updated)
