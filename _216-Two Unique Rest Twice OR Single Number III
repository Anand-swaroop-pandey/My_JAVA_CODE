//Bruteforce Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
  	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
	     
	  int[]res=twoUniqueRestTwice(arr);   
		
	  System.out.printf("[ "+res[0]+" , "+res[1]+" ]");
    }
	
	
    public static int[] twoUniqueRestTwice(int arr[])
    {
      int k=0,n=arr.length;
      int[] res=new int[2];
      for(int i=0;i<n;i++)
      {
          int j;
          for(j=0;j<n;j++)
            if(j!=i && arr[i]==arr[j])
               break;
               
          if(j==n)
          {
             res[k++]=arr[i];
             
             if(k==2)
              break;
          }
      }
      
      return res;
    }
}


//Better Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
  	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
	     
	  int[]res=twoUniqueRestTwice(arr);   
		
	  System.out.printf("[ "+res[0]+" , "+res[1]+" ]");
    }
	
	
    public static int[] twoUniqueRestTwice(int arr[])
    {
      int k=0,n=arr.length;
      int[] res=new int[2];
      int[] freqArr=new int[n];
      countFrequency(arr,n,freqArr);
	  
      for(int i=0;i<n;i++)
         if(freqArr[i]==1)
         {
           res[k++]=arr[i];        
           if(k==2)
             break;
	 }       
      
      return res;
    }
    
   public static void countFrequency(int[] arr,int n,int[] freqArr)
   {
     for(int i=0;i<n;i++)
     {
	 if(freqArr[i]==-1)
	   continue;
	      
	 int count=1;
	 for(int j=i+1;j<n;j++)
	    if(arr[i]==arr[j])
	    {
	      freqArr[j]=-1;
	      count++;
            }
           
	freqArr[i]=count; 
     }
   }
}


//Best Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the Size of the Array :");
	  int n=sc.nextInt();
	  if(n<1)
	  {
  	     System.out.println("Invalid Choice");
	     return;
	  }
	  int[] arr=new int[n];
	  System.out.printf("Enter %d Elements Of The Array :\n",n);
	  for(int i=0;i<n;i++)
	     arr[i]=sc.nextInt();
	     
	  int[]res=twoUniqueRestTwice(arr);   
		
	  System.out.printf("[ "+res[0]+" , "+res[1]+" ]");
    }
	
	
    public static int[] twoUniqueRestTwice(int arr[])
    {
      int k=0,n=arr.length;
      int[] res=new int[2];
      HashMap<Integer,Integer>hm=new HashMap<>(n);
      for(int i=0;i<n;i++)
         if(hm.containsKey(arr[i]))
           hm.put(arr[i],hm.get(arr[i])+1);
         else
           hm.put(arr[i],1);
       
      for(int i=0;i<n;i++)
         if(hm.get(arr[i])==1)
         {
           res[k++]=arr[i];
	   if(k==2)
	     break;  
         }
         
      return res;
    }
}    


//Optimal Approach
import java.util.*;
public class Test
{
    public static void main(String[] args)
    {
	System.out.println("Enter the Size of the Array:");
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int[] arr=new int[n];
        System.out.printf("Enter %d of the Array:\n",n);
	for(int i=0;i<n;i++)
           arr[i]=sc.nextInt();
        int[]res=twoUniqueRestTwice(arr);
	System.out.printf("[ "+res[0]+" , "+res[1]+" ]");
    }
		
    public static int[] twoUniqueRestTwice(int arr[])
    {
        int xXory=0;
        for(int val:arr)
          xXory=xXory^val;
             
        int rmsbm=rMSBM(xXory);         
        int x=0,y=0;
        for(int val:arr)
          if((val & rmsbm)==0)
            x=x^val;
          else
            y=y^val;
        
        int[] res=new int[2];
        res[0]=x;
        res[1]=y;
        
        return res;
    }
    
   public static int rMSBM(int n)
   {
       int rsbm= n & twosCompliment(n);
       return rsbm;
   }
		
   public static int twosCompliment(int n)
   {
       return -n;//(~n+1);
   }	
}
  
