//Bruteforce Approach
import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of the array :");
	  int n=sc.nextInt();
	  if(n<1)
	    System.out.println("Invalid Choice");
          else
	  {
	     int[] arr=new int[n];
	     System.out.println("Enter "+n+" Non Negative Elements :");
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
		   
	     System.out.println("The area of the largest rectangle in the histogram is : "+largestRectangleArea(arr,n));
	   }
	}
	
	
	public static int largestRectangleArea(int[] arr,int n) 
	{
           int currArea,maxArea=0;
           for(int i=0;i<n;i++)
           {
              currArea=arr[i]*(nextSmallerLeft(arr,n,i)+nextSmallerRight(arr,n,i)+1);
	      
              if(currArea>maxArea)  
                maxArea=currArea;
           }

           return maxArea;
        }
	
        public static int nextSmallerLeft(int[] arr,int n,int idx)
        {
           int i=(idx-1),cnt=0;
           while(i>=0 && arr[i]>=arr[idx])
           {
             i--;
             cnt++;
           }

          return cnt;
        }

        public static int nextSmallerRight(int[] arr,int n,int idx)
        {
          int i=(idx+1),cnt=0;
          while(i<n && arr[i]>=arr[idx])
          {
            i++;
            cnt++;
          }
        
          return cnt;
        }
}

//Optimal Approach

import java.util.Scanner;
public class Test
{
	public static void main(String[] args) {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter the size of the array :");
	  int n=sc.nextInt();
	  if(n<1)
	    System.out.println("Invalid Choice");
          else
	  {
	     int[] arr=new int[n];
	     System.out.println("Enter "+n+" Non Negative Elements :");
	     for(int i=0;i<n;i++)
	       arr[i]=sc.nextInt();
		   
	     System.out.println("The area of the largest rectangle in the histogram is : "+largestRectangleArea(arr,n));
	   }
	}
	
	
	public static int largestRectangleArea(int[] arr,int n) 
	{
           int currArea,maxArea=0;
           int[] nseIdxRight=new int[n];
           int[] nseIdxLeft=new int[n];
      
           nextSmallerElementIdxRight(arr,n,nseIdxRight);
           nextSmallerElementIdxLeft(arr,n,nseIdxLeft);

           for(int i=0;i<n;i++)
           {
             currArea=arr[i]*(nseIdxRight[i]-nseIdxLeft[i]-1);
             if(currArea>maxArea)  
               maxArea=currArea;
           }

           return maxArea;
        }
	
        public static void nextSmallerElementIdxLeft(int[] arr,int n,int[] nseIdxLeft)
        {
           Stack<Integer>stk=new Stack<Integer>();
      
           for(int i=0;i<n;i++)
	   {
	     while(stk.size()!=0 && arr[stk.peek()]>=arr[i])
	       stk.pop();
	     
	     if(stk.size()==0)
	       nseIdxLeft[i]=-1;
	     else
	       nseIdxLeft[i]=stk.peek();
	    
	     stk.push(i);
	   }
        }

        public static void nextSmallerElementIdxRight(int[] arr,int n,int[] nseIdxRight)
        {
           Stack<Integer>stk=new Stack<Integer>();
      
           for(int i=n-1;i>=0;i--)
	   {
	     while(stk.size()!=0 && arr[stk.peek()]>=arr[i])
	       stk.pop();
	     
	     if(stk.size()==0)
	       nseIdxRight[i]=n;
	     else
	       nseIdxRight[i]=stk.peek();
	    
	     stk.push(i);
	   }
        }
}
