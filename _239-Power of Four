//Bruteforce Approach

//Iterative Version :
import java.util.Scanner;
public class Test
{
      public static void main(String[] args)
      {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter Number:");
	  int num=sc.nextInt();
      
	  if(isPowerOf4(num))
	     System.out.printf("%d is A Power OF Four\n",num);
	  else
	     System.out.printf("%d is Not a Power OF Four\n",num);
     }

     public static boolean isPowerOf4(int num)
     {
       if(num<=0)
         return false;
        
        while(true)
        {
          if(num==1)
            break;

          if((num%4)!=0)
            return false;
             
          num=num/4;//num=num>>2
        }

       return true;
     }
}


//Recurssive Version :
import java.util.Scanner;
public class Test
{
      public static void main(String[] args)
      {
	  Scanner sc=new Scanner(System.in);
	  System.out.println("Enter Number:");
	  int num=sc.nextInt();
      
	  if(isPowerOf4(num))
	     System.out.printf("%d is A Power OF Four\n",num);
	  else
	     System.out.printf("%d is Not a Power OF Four\n",num);
     }

    public static boolean isPowerOf4(int num)
    {
        if(num==1)
          return true;
          
        if((num%4)!=0 || num==0)
           return false;
           
        return isPowerOf4(num/4); //return isPowerOf4(num>>2);
    }
}



//Better Approach
/*The basic idea is from power of 2, We can use "n&(n-1) == 0" to determine if n is power of 2.
For power of 4, the additional restriction is that in binary form, the only "1" should always located at the odd position*/

class Solution {
    public boolean isPowerOfFour(int num) {
        if(isPowerOf2(num) && isEvenPowerOfTwo(num))
         return true;
	 
       return false;
    }
    
    public static boolean isPowerOf2(int num)
    {
        if(num<=0)
          return false;
        else
        {
           if((num & (num-1))==0)
             return true;
           else
             return false;
        }
     }
	
     public static boolean isEvenPowerOfTwo(int num)
     {
        int mask; 
        for(int i=1;i<32;i+=2)
        {
           mask=1<<i;
           if((num & mask)!=0)
             return false;
        }
        return true;
     }
}


//Optimal Approach
/*
The basic idea is from power of 2, We can use "n&(n-1) == 0" to determine if n is power of 2. For power of 4, the additional restriction is that in binary form, the only "1" should always located at the odd position.
For example, 4^0 = 1, 4^1 = 100, 4^2 = 10000. So we can use "num & 0x55555555==num" to check if "1" is located at the odd position.
*/

import java.util.Scanner;
public class Test
{
    public static void main(String[] args)
    {
	 Scanner sc=new Scanner(System.in);
	 System.out.println("Enter Number:");
	 int num=sc.nextInt();
      
	 if(isPowerOf4(num))
	    System.out.printf("%d is A Power OF Four\n",num);
	 else
	    System.out.printf("%d is Not a Power OF Four",num);
    }

    public static boolean isPowerOf4(int num)
    {
       if(isPowerOf2(num)==true && isEvenPowerOfTwo(num)==true)
         return true;
	 
       return false;
    }
    
    public static boolean isPowerOf2(int num)
    {
        if(num<=0)
          return false;
        else
        {
           if((num & (num-1))==0)
             return true;
           else
             return false;
        }
    }
    
    public static boolean isEvenPowerOfTwo(int num)
    {
       int oddMask=0x55555555;
       if((num & oddMask) == num)
          return true;
        return false;
    }
}
