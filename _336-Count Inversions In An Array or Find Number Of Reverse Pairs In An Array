//Bruteforce Approach

import java.util.*;
public class Test
{
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
        if(n>0)
        {
           int[] arr=new int[n];
           System.out.printf("Enter %d Elements of Array:\n",n);
           for(int i=0;i<n;i++)
             arr[i]=sc.nextInt();
            
           System.out.println("Given array has "+count_Inversion(arr,n)+" inversions");   
        }
        else
          System.out.println("Invalid Choice");
    }
    
    public static int count_Inversion(int arr[], int n)
    {
      int cntInversion=0;
      for(int i=0;i<n;i++)
        for(int j=i+1;j<n;j++)
          if(arr[i]>arr[j])
            cntInversion++;
	    
      return cntInversion;
    }
}


//Optimal Approach
import java.util.*;
public class Test
{
	public static void main(String[] args) {
	Scanner sc=new Scanner(System.in);
        System.out.println("Enter the Size of the Array");
        int n=sc.nextInt();
        if(n>0)
        {
           long[] arr=new long[n];
           System.out.printf("Enter %d Elements of Array:\n",n);
           for(int i=0;i<n;i++)
              arr[i]=sc.nextLong();
            
           System.out.println("Given array has "+count_Inversion(arr,n)+" inversions");   
        }
        else
         System.out.println("Invalid Choice"); 
  }
    
  public static long count_Inversion(long arr[], int n)
  {
     return mergeSort(arr,0,(n-1));
  }
    
   public static long mergeSort(long arr[],int lb,int ub)
   {
     long inv_count = 0;
     if(lb<ub)
     {
        int mid = (lb + ub)/2;
        inv_count += mergeSort(arr,lb,mid);
        inv_count += mergeSort(arr,mid+1,ub);
        inv_count += merge(arr,lb,mid,ub);
     }
     return inv_count;
   }
   
   public static long merge(long arr[],int lb,int mid,int ub)
   {
     long inv_count=0;
     int i = lb,j = mid+1,k =0;
     long[] temp=new long[ub-lb+1];
    
     while((i <=mid) && (j <= ub))
        if(arr[i] <= arr[j])
            temp[k++] = arr[i++];
        else
        {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i+1);
        }

     while(i <=mid)
        temp[k++] = arr[i++];

     while(j <= ub)
        temp[k++] = arr[j++];
    
     k=0;
     for(i = lb ; i <= ub ; i++)
        arr[i] = temp[k++];
    
     return inv_count;
 }
}
